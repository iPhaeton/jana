{"version":3,"sources":["webpack:///./vendor/bower_components/async/dist/async.js","webpack:///../~/timers-browserify/main.js","webpack:///../~/process/browser.js","webpack:///./javascripts/sockJSClient.js?1478"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA,8CAA6C;AAC7C,EAAC,2BAA2B;;AAE5B;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,EAAE;AACf,cAAa,MAAM;AACnB,gBAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,OAAO;AACpB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,EAAE;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,YAAY;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,aAAa;AAC1B,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA,gCAA+B,kBAAkB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,cAAa,OAAO;AACpB,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,yBAAyB;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA4B,6BAA6B;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA,oBAAmB;AACnB;AACA,YAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA,0BAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC;AACA,cAAa,KAAK;AAClB;AACA,cAAa,SAAS;AACtB;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA,gCAA+B,mCAAmC;AAClE;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA,cAAa,sBAAsB;AACnC;AACA,cAAa,KAAK;AAClB;AACA,cAAa,SAAS;AACtB;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA,gBAAe;AACf,YAAW;AACX;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,SAAS;AACtB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,QAAQ;AACrB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB,gBAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,EAAE;AACf,cAAa,OAAO;AACpB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA,cAAa,SAAS;AACtB;AACA,mEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,8BAA6B,sDAAsD;AACnF,WAAU;AACV,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,6BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf,YAAW;AACX,QAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;;AAEA;AACA,gBAAe;AACf;AACA;AACA;AACA,YAAW;;AAEX;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,SAAS;AACtB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,MAAM;AACnB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,YAAY;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,MAAM;AACnB,gBAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,MAAM;AACnB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA,wDAAuD,8BAA8B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,8BAA8B;AACxE;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,8BAA6B,8CAA8C;AAC3E;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,8BAA6B,8CAA8C;AAC3E,WAAU;AACV;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA,QAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAgD;AAChD,iDAAgD;;AAEhD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;;AAEA;AACA,yDAAwD;AACxD;;AAEA;AACA,wDAAuD;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf;AACA;AACA,YAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;;AAEnB;;AAEA;AACA;AACA;AACA,gBAAe;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,OAAO;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wDAAuD,+BAA+B;AACtF,gBAAe,OAAO;AACtB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,OAAO;AACvB;AACA;AACA,iBAAgB,SAAS;AACzB;AACA;AACA;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,OAAO;AACpB,mDAAkD;AAClD;AACA,gBAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,gBAAgB;AACtC;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,kBAAiB,YAAY;AAC7B;AACA,OAAM;AACN,kBAAiB,YAAY;AAC7B;AACA,OAAM;AACN,kBAAiB,YAAY;AAC7B;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,EAAE;AACf,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA,gBAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA,cAAa,YAAY;AACzB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;AACA;AACA;AACA;AACA,iCAAgC,wCAAwC;AACxE,eAAc;AACd,iCAAgC,kDAAkD;AAClF;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,gBAAe;AACf,YAAW;AACX;AACA,YAAW;AACX,QAAO;AACP,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,YAAY;AACzB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA,oBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sDAAqD,mCAAmC;AACxF,eAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,KAAK;AAClB;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,EAAE;AACjB;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAsB,sCAAsC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA,wBAAuB;AACvB;AACA;AACA,YAAW;AACX,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA,8BAA6B,YAAY;AACzC,WAAU;AACV;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA,2CAA0C,gCAAgC;AAC1E;AACA;AACA,qCAAoC,kCAAkC;AACtE;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2CAA0C,gCAAgC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA,wBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA,sBAAqB,gCAAgC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,SAAS;AACtB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA0B,8BAA8B;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA,2BAA0B,8BAA8B;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C,WAAU;AACV,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB,gBAAe;AACf;AACA;AACA,YAAW;AACX;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA,4BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;;AAEA;AACA,4BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA,qCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA;AACA,YAAW;AACX;AACA;AACA,gBAAe;AACf;AACA,QAAO;AACP;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAA+B,mCAAmC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA,4BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;;AAEA;AACA,gCAA+B,mCAAmC;AAClE;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,cAAa,SAAS;AACtB;AACA;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf,YAAW;AACX;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,gDAA+C,OAAO;AACtD;AACA;AACA,gBAAe;AACf;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA,+BAA8B,kCAAkC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;AACA,cAAa,iBAAiB;AAC9B;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA,OAAM;AACN,wCAAuC;AACvC,OAAM;AACN;AACA;;AAEA;AACA;AACA,gBAAe,OAAO;AACtB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,OAAO;AACvB;AACA;AACA,iBAAgB,SAAS;AACzB;AACA;AACA;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA;AACA,iBAAgB,SAAS;AACzB;AACA;AACA,iBAAgB,OAAO;AACvB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,QAAQ;AACxB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA,iBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA,gBAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,YAAY;AACzB;AACA,OAAM;AACN,cAAa,YAAY;AACzB;AACA,OAAM;AACN;AACA;AACA,eAAc,YAAY,EAAE,YAAY,EAAE,YAAY;AACtD;AACA,OAAM;AACN;AACA;AACA,iBAAgB,YAAY;AAC5B;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,gCAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA,gBAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf;AACA;AACA,YAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;;AAEA;AACA,yBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,cAAa,MAAM;AACnB,cAAa,EAAE;AACf,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB,gBAAe;AACf;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA,YAAW;;AAEX;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA,YAAW;AACX,QAAO;AACP;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA,iCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA,cAAa,MAAM;AACnB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;;AAEA;AACA,6BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,EAAE;AACf,gBAAe,SAAS;AACxB;AACA;AACA,2CAA0C,SAAS;AACnD;AACA;AACA,cAAa,SAAS,GAAG,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,cAAc,UAAU,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,mBAAkB,wBAAwB;AAC1C;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAW;AACX;AACA,YAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA,YAAW;AACX;;AAEA;AACA;;AAEA;AACA,oCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA,cAAa,cAAc,UAAU,sBAAsB;AAC3D;AACA,cAAa,SAAS;AACtB,gBAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAkD;AAClD,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA,eAAc;AACd;AACA,OAAM;AACN,uCAAsC;AACtC,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,2BAA0B,8BAA8B;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;;AAEA;AACA,2BAA0B,8BAA8B;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,SAAS;AACtB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA,+BAA8B;AAC9B,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,+BAA8B,+BAA+B;AAC7D,YAAW;AACX,QAAO;AACP;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,OAAO;AACpB,cAAa,EAAE;AACf;AACA,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA,cAAa,SAAS,4BAA4B,6BAA6B;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAqC,6BAA6B;AAClE;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA,cAAa,SAAS,iBAAiB,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;;AAEA;AACA,0BAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA,cAAa,SAAS,iBAAiB,6BAA6B;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,sBAAsB;AACnC,cAAa,EAAE;AACf;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA,uBAAsB,iBAAiB;AACvC;AACA;AACA;AACA,WAAU;AACV,OAAM;AACN,iCAAgC;AAChC,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;;AAEA;AACA,yBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA,cAAa,SAAS;AACtB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,kBAAkB,EAAE;AACzC;AACA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,cAAa,SAAS;AACtB;AACA,cAAa,SAAS;AACtB;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW;;AAEX;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC,G;;;;;;;AC5/JD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,iBAAiB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA,G;;;;;;;AC3EA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA,6BAA4B,UAAU;;;;;;;ACtHtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAAoG;AACpG;AACA;AACA,sCAAqC,OAAO;AAC5C;AACA;AACA,EAAC,E","file":"4.async.js","sourcesContent":["(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n  (factory((global.async = global.async || {})));\r\n}(this, function (exports) { 'use strict';\r\n\r\n  /**\r\n   * A faster alternative to `Function#apply`, this function invokes `func`\r\n   * with the `this` binding of `thisArg` and the arguments of `args`.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to invoke.\r\n   * @param {*} thisArg The `this` binding of `func`.\r\n   * @param {Array} args The arguments to invoke `func` with.\r\n   * @returns {*} Returns the result of `func`.\r\n   */\r\n  function apply(func, thisArg, args) {\r\n    var length = args.length;\r\n    switch (length) {\r\n      case 0: return func.call(thisArg);\r\n      case 1: return func.call(thisArg, args[0]);\r\n      case 2: return func.call(thisArg, args[0], args[1]);\r\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\r\n    }\r\n    return func.apply(thisArg, args);\r\n  }\r\n\r\n  /**\r\n   * Checks if `value` is the\r\n   * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\r\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObject({});\r\n   * // => true\r\n   *\r\n   * _.isObject([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObject(_.noop);\r\n   * // => true\r\n   *\r\n   * _.isObject(null);\r\n   * // => false\r\n   */\r\n  function isObject(value) {\r\n    var type = typeof value;\r\n    return !!value && (type == 'object' || type == 'function');\r\n  }\r\n\r\n  var funcTag = '[object Function]';\r\n  var genTag = '[object GeneratorFunction]';\r\n  /** Used for built-in method references. */\r\n  var objectProto = Object.prototype;\r\n\r\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\r\n  var objectToString = objectProto.toString;\r\n\r\n  /**\r\n   * Checks if `value` is classified as a `Function` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isFunction(_);\r\n   * // => true\r\n   *\r\n   * _.isFunction(/abc/);\r\n   * // => false\r\n   */\r\n  function isFunction(value) {\r\n    // The use of `Object#toString` avoids issues with the `typeof` operator\r\n    // in Safari 8 which returns 'object' for typed array and weak map constructors,\r\n    // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\r\n    var tag = isObject(value) ? objectToString.call(value) : '';\r\n    return tag == funcTag || tag == genTag;\r\n  }\r\n\r\n  /**\r\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n   * and has a `typeof` result of \"object\".\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObjectLike({});\r\n   * // => true\r\n   *\r\n   * _.isObjectLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObjectLike(_.noop);\r\n   * // => false\r\n   *\r\n   * _.isObjectLike(null);\r\n   * // => false\r\n   */\r\n  function isObjectLike(value) {\r\n    return !!value && typeof value == 'object';\r\n  }\r\n\r\n  /** `Object#toString` result references. */\r\n  var symbolTag = '[object Symbol]';\r\n\r\n  /** Used for built-in method references. */\r\n  var objectProto$1 = Object.prototype;\r\n\r\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\r\n  var objectToString$1 = objectProto$1.toString;\r\n\r\n  /**\r\n   * Checks if `value` is classified as a `Symbol` primitive or object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isSymbol(Symbol.iterator);\r\n   * // => true\r\n   *\r\n   * _.isSymbol('abc');\r\n   * // => false\r\n   */\r\n  function isSymbol(value) {\r\n    return typeof value == 'symbol' ||\r\n      (isObjectLike(value) && objectToString$1.call(value) == symbolTag);\r\n  }\r\n\r\n  /** Used as references for various `Number` constants. */\r\n  var NAN = 0 / 0;\r\n\r\n  /** Used to match leading and trailing whitespace. */\r\n  var reTrim = /^\\s+|\\s+$/g;\r\n\r\n  /** Used to detect bad signed hexadecimal string values. */\r\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n  /** Used to detect binary string values. */\r\n  var reIsBinary = /^0b[01]+$/i;\r\n\r\n  /** Used to detect octal string values. */\r\n  var reIsOctal = /^0o[0-7]+$/i;\r\n\r\n  /** Built-in method references without a dependency on `root`. */\r\n  var freeParseInt = parseInt;\r\n\r\n  /**\r\n   * Converts `value` to a number.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to process.\r\n   * @returns {number} Returns the number.\r\n   * @example\r\n   *\r\n   * _.toNumber(3.2);\r\n   * // => 3.2\r\n   *\r\n   * _.toNumber(Number.MIN_VALUE);\r\n   * // => 5e-324\r\n   *\r\n   * _.toNumber(Infinity);\r\n   * // => Infinity\r\n   *\r\n   * _.toNumber('3.2');\r\n   * // => 3.2\r\n   */\r\n  function toNumber(value) {\r\n    if (typeof value == 'number') {\r\n      return value;\r\n    }\r\n    if (isSymbol(value)) {\r\n      return NAN;\r\n    }\r\n    if (isObject(value)) {\r\n      var other = isFunction(value.valueOf) ? value.valueOf() : value;\r\n      value = isObject(other) ? (other + '') : other;\r\n    }\r\n    if (typeof value != 'string') {\r\n      return value === 0 ? value : +value;\r\n    }\r\n    value = value.replace(reTrim, '');\r\n    var isBinary = reIsBinary.test(value);\r\n    return (isBinary || reIsOctal.test(value))\r\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n      : (reIsBadHex.test(value) ? NAN : +value);\r\n  }\r\n\r\n  var INFINITY = 1 / 0;\r\n  var MAX_INTEGER = 1.7976931348623157e+308;\r\n  /**\r\n   * Converts `value` to a finite number.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.12.0\r\n   * @category Lang\r\n   * @param {*} value The value to convert.\r\n   * @returns {number} Returns the converted number.\r\n   * @example\r\n   *\r\n   * _.toFinite(3.2);\r\n   * // => 3.2\r\n   *\r\n   * _.toFinite(Number.MIN_VALUE);\r\n   * // => 5e-324\r\n   *\r\n   * _.toFinite(Infinity);\r\n   * // => 1.7976931348623157e+308\r\n   *\r\n   * _.toFinite('3.2');\r\n   * // => 3.2\r\n   */\r\n  function toFinite(value) {\r\n    if (!value) {\r\n      return value === 0 ? value : 0;\r\n    }\r\n    value = toNumber(value);\r\n    if (value === INFINITY || value === -INFINITY) {\r\n      var sign = (value < 0 ? -1 : 1);\r\n      return sign * MAX_INTEGER;\r\n    }\r\n    return value === value ? value : 0;\r\n  }\r\n\r\n  /**\r\n   * Converts `value` to an integer.\r\n   *\r\n   * **Note:** This method is loosely based on\r\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to convert.\r\n   * @returns {number} Returns the converted integer.\r\n   * @example\r\n   *\r\n   * _.toInteger(3.2);\r\n   * // => 3\r\n   *\r\n   * _.toInteger(Number.MIN_VALUE);\r\n   * // => 0\r\n   *\r\n   * _.toInteger(Infinity);\r\n   * // => 1.7976931348623157e+308\r\n   *\r\n   * _.toInteger('3.2');\r\n   * // => 3\r\n   */\r\n  function toInteger(value) {\r\n    var result = toFinite(value),\r\n        remainder = result % 1;\r\n\r\n    return result === result ? (remainder ? result - remainder : result) : 0;\r\n  }\r\n\r\n  /** Used as the `TypeError` message for \"Functions\" methods. */\r\n  var FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n  /* Built-in method references for those with the same name as other `lodash` methods. */\r\n  var nativeMax = Math.max;\r\n\r\n  /**\r\n   * Creates a function that invokes `func` with the `this` binding of the\r\n   * created function and arguments from `start` and beyond provided as\r\n   * an array.\r\n   *\r\n   * **Note:** This method is based on the\r\n   * [rest parameter](https://mdn.io/rest_parameters).\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Function\r\n   * @param {Function} func The function to apply a rest parameter to.\r\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n   * @returns {Function} Returns the new function.\r\n   * @example\r\n   *\r\n   * var say = _.rest(function(what, names) {\r\n   *   return what + ' ' + _.initial(names).join(', ') +\r\n   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\r\n   * });\r\n   *\r\n   * say('hello', 'fred', 'barney', 'pebbles');\r\n   * // => 'hello fred, barney, & pebbles'\r\n   */\r\n  function rest(func, start) {\r\n    if (typeof func != 'function') {\r\n      throw new TypeError(FUNC_ERROR_TEXT);\r\n    }\r\n    start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\r\n    return function() {\r\n      var args = arguments,\r\n          index = -1,\r\n          length = nativeMax(args.length - start, 0),\r\n          array = Array(length);\r\n\r\n      while (++index < length) {\r\n        array[index] = args[start + index];\r\n      }\r\n      switch (start) {\r\n        case 0: return func.call(this, array);\r\n        case 1: return func.call(this, args[0], array);\r\n        case 2: return func.call(this, args[0], args[1], array);\r\n      }\r\n      var otherArgs = Array(start + 1);\r\n      index = -1;\r\n      while (++index < start) {\r\n        otherArgs[index] = args[index];\r\n      }\r\n      otherArgs[start] = array;\r\n      return apply(func, this, otherArgs);\r\n    };\r\n  }\r\n\r\n  function initialParams (fn) {\r\n      return rest(function (args /*..., callback*/) {\r\n          var callback = args.pop();\r\n          fn.call(this, args, callback);\r\n      });\r\n  }\r\n\r\n  function applyEach$1(eachfn) {\r\n      return rest(function (fns, args) {\r\n          var go = initialParams(function (args, callback) {\r\n              var that = this;\r\n              return eachfn(fns, function (fn, cb) {\r\n                  fn.apply(that, args.concat([cb]));\r\n              }, callback);\r\n          });\r\n          if (args.length) {\r\n              return go.apply(this, args);\r\n          } else {\r\n              return go;\r\n          }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * A method that returns `undefined`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.3.0\r\n   * @category Util\r\n   * @example\r\n   *\r\n   * _.times(2, _.noop);\r\n   * // => [undefined, undefined]\r\n   */\r\n  function noop() {\r\n    // No operation performed.\r\n  }\r\n\r\n  function once(fn) {\r\n      return function () {\r\n          if (fn === null) return;\r\n          var callFn = fn;\r\n          fn = null;\r\n          callFn.apply(this, arguments);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.property` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {string} key The key of the property to get.\r\n   * @returns {Function} Returns the new accessor function.\r\n   */\r\n  function baseProperty(key) {\r\n    return function(object) {\r\n      return object == null ? undefined : object[key];\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the \"length\" property value of `object`.\r\n   *\r\n   * **Note:** This function is used to avoid a\r\n   * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\r\n   * Safari on at least iOS 8.1-8.3 ARM64.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {*} Returns the \"length\" value.\r\n   */\r\n  var getLength = baseProperty('length');\r\n\r\n  /** Used as references for various `Number` constants. */\r\n  var MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n  /**\r\n   * Checks if `value` is a valid array-like length.\r\n   *\r\n   * **Note:** This function is loosely based on\r\n   * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a valid length,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isLength(3);\r\n   * // => true\r\n   *\r\n   * _.isLength(Number.MIN_VALUE);\r\n   * // => false\r\n   *\r\n   * _.isLength(Infinity);\r\n   * // => false\r\n   *\r\n   * _.isLength('3');\r\n   * // => false\r\n   */\r\n  function isLength(value) {\r\n    return typeof value == 'number' &&\r\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  /**\r\n   * Checks if `value` is array-like. A value is considered array-like if it's\r\n   * not a function and has a `value.length` that's an integer greater than or\r\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isArrayLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(document.body.children);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike('abc');\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(_.noop);\r\n   * // => false\r\n   */\r\n  function isArrayLike(value) {\r\n    return value != null && isLength(getLength(value)) && !isFunction(value);\r\n  }\r\n\r\n  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\r\n\r\n  function getIterator (coll) {\r\n      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\r\n  }\r\n\r\n  /* Built-in method references for those with the same name as other `lodash` methods. */\r\n  var nativeGetPrototype = Object.getPrototypeOf;\r\n\r\n  /**\r\n   * Gets the `[[Prototype]]` of `value`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @returns {null|Object} Returns the `[[Prototype]]`.\r\n   */\r\n  function getPrototype(value) {\r\n    return nativeGetPrototype(Object(value));\r\n  }\r\n\r\n  /** Used for built-in method references. */\r\n  var objectProto$2 = Object.prototype;\r\n\r\n  /** Used to check objects for own properties. */\r\n  var hasOwnProperty = objectProto$2.hasOwnProperty;\r\n\r\n  /**\r\n   * The base implementation of `_.has` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {Object} [object] The object to query.\r\n   * @param {Array|string} key The key to check.\r\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n   */\r\n  function baseHas(object, key) {\r\n    // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\r\n    // that are composed entirely of index properties, return `false` for\r\n    // `hasOwnProperty` checks of them.\r\n    return object != null &&\r\n      (hasOwnProperty.call(object, key) ||\r\n        (typeof object == 'object' && key in object && getPrototype(object) === null));\r\n  }\r\n\r\n  /* Built-in method references for those with the same name as other `lodash` methods. */\r\n  var nativeKeys = Object.keys;\r\n\r\n  /**\r\n   * The base implementation of `_.keys` which doesn't skip the constructor\r\n   * property of prototypes or treat sparse arrays as dense.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   */\r\n  function baseKeys(object) {\r\n    return nativeKeys(Object(object));\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.times` without support for iteratee shorthands\r\n   * or max array length checks.\r\n   *\r\n   * @private\r\n   * @param {number} n The number of times to invoke `iteratee`.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the array of results.\r\n   */\r\n  function baseTimes(n, iteratee) {\r\n    var index = -1,\r\n        result = Array(n);\r\n\r\n    while (++index < n) {\r\n      result[index] = iteratee(index);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * This method is like `_.isArrayLike` except that it also checks if `value`\r\n   * is an object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isArrayLikeObject([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArrayLikeObject(document.body.children);\r\n   * // => true\r\n   *\r\n   * _.isArrayLikeObject('abc');\r\n   * // => false\r\n   *\r\n   * _.isArrayLikeObject(_.noop);\r\n   * // => false\r\n   */\r\n  function isArrayLikeObject(value) {\r\n    return isObjectLike(value) && isArrayLike(value);\r\n  }\r\n\r\n  /** `Object#toString` result references. */\r\n  var argsTag = '[object Arguments]';\r\n\r\n  /** Used for built-in method references. */\r\n  var objectProto$3 = Object.prototype;\r\n\r\n  /** Used to check objects for own properties. */\r\n  var hasOwnProperty$1 = objectProto$3.hasOwnProperty;\r\n\r\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\r\n  var objectToString$2 = objectProto$3.toString;\r\n\r\n  /** Built-in value references. */\r\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\r\n\r\n  /**\r\n   * Checks if `value` is likely an `arguments` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isArguments(function() { return arguments; }());\r\n   * // => true\r\n   *\r\n   * _.isArguments([1, 2, 3]);\r\n   * // => false\r\n   */\r\n  function isArguments(value) {\r\n    // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\r\n    return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&\r\n      (!propertyIsEnumerable.call(value, 'callee') || objectToString$2.call(value) == argsTag);\r\n  }\r\n\r\n  /**\r\n   * Checks if `value` is classified as an `Array` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @type {Function}\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isArray([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArray(document.body.children);\r\n   * // => false\r\n   *\r\n   * _.isArray('abc');\r\n   * // => false\r\n   *\r\n   * _.isArray(_.noop);\r\n   * // => false\r\n   */\r\n  var isArray = Array.isArray;\r\n\r\n  /** `Object#toString` result references. */\r\n  var stringTag = '[object String]';\r\n\r\n  /** Used for built-in method references. */\r\n  var objectProto$4 = Object.prototype;\r\n\r\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\r\n  var objectToString$3 = objectProto$4.toString;\r\n\r\n  /**\r\n   * Checks if `value` is classified as a `String` primitive or object.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is correctly classified,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isString('abc');\r\n   * // => true\r\n   *\r\n   * _.isString(1);\r\n   * // => false\r\n   */\r\n  function isString(value) {\r\n    return typeof value == 'string' ||\r\n      (!isArray(value) && isObjectLike(value) && objectToString$3.call(value) == stringTag);\r\n  }\r\n\r\n  /**\r\n   * Creates an array of index keys for `object` values of arrays,\r\n   * `arguments` objects, and strings, otherwise `null` is returned.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array|null} Returns index keys, else `null`.\r\n   */\r\n  function indexKeys(object) {\r\n    var length = object ? object.length : undefined;\r\n    if (isLength(length) &&\r\n        (isArray(object) || isString(object) || isArguments(object))) {\r\n      return baseTimes(length, String);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Used as references for various `Number` constants. */\r\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\r\n\r\n  /** Used to detect unsigned integer values. */\r\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n  /**\r\n   * Checks if `value` is a valid array-like index.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n   */\r\n  function isIndex(value, length) {\r\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\r\n    return !!length &&\r\n      (typeof value == 'number' || reIsUint.test(value)) &&\r\n      (value > -1 && value % 1 == 0 && value < length);\r\n  }\r\n\r\n  /** Used for built-in method references. */\r\n  var objectProto$5 = Object.prototype;\r\n\r\n  /**\r\n   * Checks if `value` is likely a prototype object.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n   */\r\n  function isPrototype(value) {\r\n    var Ctor = value && value.constructor,\r\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\r\n\r\n    return value === proto;\r\n  }\r\n\r\n  /**\r\n   * Creates an array of the own enumerable property names of `object`.\r\n   *\r\n   * **Note:** Non-object values are coerced to objects. See the\r\n   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\r\n   * for more details.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Object\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   * @example\r\n   *\r\n   * function Foo() {\r\n   *   this.a = 1;\r\n   *   this.b = 2;\r\n   * }\r\n   *\r\n   * Foo.prototype.c = 3;\r\n   *\r\n   * _.keys(new Foo);\r\n   * // => ['a', 'b'] (iteration order is not guaranteed)\r\n   *\r\n   * _.keys('hi');\r\n   * // => ['0', '1']\r\n   */\r\n  function keys(object) {\r\n    var isProto = isPrototype(object);\r\n    if (!(isProto || isArrayLike(object))) {\r\n      return baseKeys(object);\r\n    }\r\n    var indexes = indexKeys(object),\r\n        skipIndexes = !!indexes,\r\n        result = indexes || [],\r\n        length = result.length;\r\n\r\n    for (var key in object) {\r\n      if (baseHas(object, key) &&\r\n          !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\r\n          !(isProto && key == 'constructor')) {\r\n        result.push(key);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function iterator(coll) {\r\n      var i = -1;\r\n      var len;\r\n      if (isArrayLike(coll)) {\r\n          len = coll.length;\r\n          return function next() {\r\n              i++;\r\n              return i < len ? { value: coll[i], key: i } : null;\r\n          };\r\n      }\r\n\r\n      var iterate = getIterator(coll);\r\n      if (iterate) {\r\n          return function next() {\r\n              var item = iterate.next();\r\n              if (item.done) return null;\r\n              i++;\r\n              return { value: item.value, key: i };\r\n          };\r\n      }\r\n\r\n      var okeys = keys(coll);\r\n      len = okeys.length;\r\n      return function next() {\r\n          i++;\r\n          var key = okeys[i];\r\n          return i < len ? { value: coll[key], key: key } : null;\r\n      };\r\n  }\r\n\r\n  function onlyOnce(fn) {\r\n      return function () {\r\n          if (fn === null) throw new Error(\"Callback was already called.\");\r\n          var callFn = fn;\r\n          fn = null;\r\n          callFn.apply(this, arguments);\r\n      };\r\n  }\r\n\r\n  function _eachOfLimit(limit) {\r\n      return function (obj, iteratee, callback) {\r\n          callback = once(callback || noop);\r\n          obj = obj || [];\r\n          var nextElem = iterator(obj);\r\n          if (limit <= 0) {\r\n              return callback(null);\r\n          }\r\n          var done = false;\r\n          var running = 0;\r\n          var errored = false;\r\n\r\n          (function replenish() {\r\n              if (done && running <= 0) {\r\n                  return callback(null);\r\n              }\r\n\r\n              while (running < limit && !errored) {\r\n                  var elem = nextElem();\r\n                  if (elem === null) {\r\n                      done = true;\r\n                      if (running <= 0) {\r\n                          callback(null);\r\n                      }\r\n                      return;\r\n                  }\r\n                  running += 1;\r\n                  /* eslint {no-loop-func: 0} */\r\n                  iteratee(elem.value, elem.key, onlyOnce(function (err) {\r\n                      running -= 1;\r\n                      if (err) {\r\n                          callback(err);\r\n                          errored = true;\r\n                      } else {\r\n                          replenish();\r\n                      }\r\n                  }));\r\n              }\r\n          })();\r\n      };\r\n  }\r\n\r\n  function doParallelLimit(fn) {\r\n      return function (obj, limit, iteratee, callback) {\r\n          return fn(_eachOfLimit(limit), obj, iteratee, callback);\r\n      };\r\n  }\r\n\r\n  function _asyncMap(eachfn, arr, iteratee, callback) {\r\n      callback = once(callback || noop);\r\n      arr = arr || [];\r\n      var results = [];\r\n      var counter = 0;\r\n\r\n      eachfn(arr, function (value, _, callback) {\r\n          var index = counter++;\r\n          iteratee(value, function (err, v) {\r\n              results[index] = v;\r\n              callback(err);\r\n          });\r\n      }, function (err) {\r\n          callback(err, results);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name mapLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, transformed)` which must be called\r\n   * once it has completed with an error (which can be `null`) and a transformed\r\n   * item. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\r\n  var mapLimit = doParallelLimit(_asyncMap);\r\n\r\n  function doLimit(fn, limit) {\r\n      return function (iterable, iteratee, callback) {\r\n          return fn(iterable, limit, iteratee, callback);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * Produces a new collection of values by mapping each value in `coll` through\r\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\r\n   * and a callback for when it has finished processing. Each of these callback\r\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\r\n   * `iteratee` passes an error to its callback, the main `callback` (for the\r\n   * `map` function) is immediately called with the error.\r\n   *\r\n   * Note, that since this function applies the `iteratee` to each item in\r\n   * parallel, there is no guarantee that the `iteratee` functions will complete\r\n   * in order. However, the results array will be in the same order as the\r\n   * original `coll`.\r\n   *\r\n   * If `map` is passed an Object, the results will be an Array.  The results\r\n   * will roughly be in the order of the original Objects' keys (but this can\r\n   * vary across JavaScript engines)\r\n   *\r\n   * @name map\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, transformed)` which must be called\r\n   * once it has completed with an error (which can be `null`) and a\r\n   * transformed item. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an Array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\r\n   *     // results is now an array of stats for each file\r\n   * });\r\n   */\r\n  var map = doLimit(mapLimit, Infinity);\r\n\r\n  /**\r\n   * Applies the provided arguments to each function in the array, calling\r\n   * `callback` after all functions have completed. If you only provide the first\r\n   * argument, then it will return a function which lets you pass in the\r\n   * arguments as if it were a single function call.\r\n   *\r\n   * @name applyEach\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all\r\n   * call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument is provided, it will return\r\n   * a function which lets you pass in the arguments as if it were a single\r\n   * function call.\r\n   * @example\r\n   *\r\n   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\r\n   *\r\n   * // partial application example:\r\n   * async.each(\r\n   *     buckets,\r\n   *     async.applyEach([enableSearch, updateSchema]),\r\n   *     callback\r\n   * );\r\n   */\r\n  var applyEach = applyEach$1(map);\r\n\r\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, transformed)` which must be called\r\n   * once it has completed with an error (which can be `null`) and a\r\n   * transformed item. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\r\n  var mapSeries = doLimit(mapLimit, 1);\r\n\r\n  /**\r\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\r\n   *\r\n   * @name applyEachSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all\r\n   * call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument is provided, it will return\r\n   * a function which lets you pass in the arguments as if it were a single\r\n   * function call.\r\n   */\r\n  var applyEachSeries = applyEach$1(mapSeries);\r\n\r\n  /**\r\n   * Creates a continuation function with some arguments already applied.\r\n   *\r\n   * Useful as a shorthand when combined with other control flow functions. Any\r\n   * arguments passed to the returned function are added to the arguments\r\n   * originally passed to apply.\r\n   *\r\n   * @name apply\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} function - The function you want to eventually apply all\r\n   * arguments to. Invokes with (arguments...).\r\n   * @param {...*} arguments... - Any number of arguments to automatically apply\r\n   * when the continuation is called.\r\n   * @example\r\n   *\r\n   * // using apply\r\n   * async.parallel([\r\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\r\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\r\n   * ]);\r\n   *\r\n   *\r\n   * // the same process without using apply\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile1', 'test1', callback);\r\n   *     },\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile2', 'test2', callback);\r\n   *     }\r\n   * ]);\r\n   *\r\n   * // It's possible to pass any number of additional arguments when calling the\r\n   * // continuation:\r\n   *\r\n   * node> var fn = async.apply(sys.puts, 'one');\r\n   * node> fn('two', 'three');\r\n   * one\r\n   * two\r\n   * three\r\n   */\r\n  var apply$1 = rest(function (fn, args) {\r\n      return rest(function (callArgs) {\r\n          return fn.apply(null, args.concat(callArgs));\r\n      });\r\n  });\r\n\r\n  /**\r\n   * Take a sync function and make it async, passing its return value to a\r\n   * callback. This is useful for plugging sync functions into a waterfall,\r\n   * series, or other async functions. Any arguments passed to the generated\r\n   * function will be passed to the wrapped function (except for the final\r\n   * callback argument). Errors thrown will be passed to the callback.\r\n   *\r\n   * If the function passed to `asyncify` returns a Promise, that promises's\r\n   * resolved/rejected state will be used to call the callback, rather than simply\r\n   * the synchronous return value.\r\n   *\r\n   * This also means you can asyncify ES2016 `async` functions.\r\n   *\r\n   * @name asyncify\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @alias wrapSync\r\n   * @category Util\r\n   * @param {Function} func - The synchronous function to convert to an\r\n   * asynchronous function.\r\n   * @returns {Function} An asynchronous wrapper of the `func`. To be invoked with\r\n   * (callback).\r\n   * @example\r\n   *\r\n   * // passing a regular synchronous function\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(JSON.parse),\r\n   *     function (data, next) {\r\n   *         // data is the result of parsing the text.\r\n   *         // If there was a parsing error, it would have been caught.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // passing a function returning a promise\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(function (contents) {\r\n   *         return db.model.create(contents);\r\n   *     }),\r\n   *     function (model, next) {\r\n   *         // `model` is the instantiated model object.\r\n   *         // If there was an error, this function would be skipped.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // es6 example\r\n   * var q = async.queue(async.asyncify(async function(file) {\r\n   *     var intermediateStep = await processFile(file);\r\n   *     return await somePromise(intermediateStep)\r\n   * }));\r\n   *\r\n   * q.push(files);\r\n   */\r\n  function asyncify(func) {\r\n      return initialParams(function (args, callback) {\r\n          var result;\r\n          try {\r\n              result = func.apply(this, args);\r\n          } catch (e) {\r\n              return callback(e);\r\n          }\r\n          // if result is Promise object\r\n          if (isObject(result) && typeof result.then === 'function') {\r\n              result.then(function (value) {\r\n                  callback(null, value);\r\n              }, function (err) {\r\n                  callback(err.message ? err : new Error(err));\r\n              });\r\n          } else {\r\n              callback(null, result);\r\n          }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.forEach` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function arrayEach(array, iteratee) {\r\n    var index = -1,\r\n        length = array ? array.length : 0;\r\n\r\n    while (++index < length) {\r\n      if (iteratee(array[index], index, array) === false) {\r\n        break;\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n   *\r\n   * @private\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Function} Returns the new base function.\r\n   */\r\n  function createBaseFor(fromRight) {\r\n    return function(object, iteratee, keysFunc) {\r\n      var index = -1,\r\n          iterable = Object(object),\r\n          props = keysFunc(object),\r\n          length = props.length;\r\n\r\n      while (length--) {\r\n        var key = props[fromRight ? length : ++index];\r\n        if (iteratee(iterable[key], key, iterable) === false) {\r\n          break;\r\n        }\r\n      }\r\n      return object;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `baseForOwn` which iterates over `object`\r\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {Function} keysFunc The function to get the keys of `object`.\r\n   * @returns {Object} Returns `object`.\r\n   */\r\n  var baseFor = createBaseFor();\r\n\r\n  /**\r\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Object} Returns `object`.\r\n   */\r\n  function baseForOwn(object, iteratee) {\r\n    return object && baseFor(object, iteratee, keys);\r\n  }\r\n\r\n  /**\r\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to search.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.\r\n   */\r\n  function indexOfNaN(array, fromIndex, fromRight) {\r\n    var length = array.length,\r\n        index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n    while ((fromRight ? index-- : ++index < length)) {\r\n      var other = array[index];\r\n      if (other !== other) {\r\n        return index;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to search.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function baseIndexOf(array, value, fromIndex) {\r\n    if (value !== value) {\r\n      return indexOfNaN(array, fromIndex);\r\n    }\r\n    var index = fromIndex - 1,\r\n        length = array.length;\r\n\r\n    while (++index < length) {\r\n      if (array[index] === value) {\r\n        return index;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Determines the best order for running the functions in `tasks`, based on\r\n   * their requirements. Each function can optionally depend on other functions\r\n   * being completed first, and each function is run as soon as its requirements\r\n   * are satisfied.\r\n   *\r\n   * If any of the functions pass an error to their callback, the `auto` sequence\r\n   * will stop. Further tasks will not execute (so any other functions depending\r\n   * on it will not run), and the main `callback` is immediately called with the\r\n   * error.\r\n   *\r\n   * Functions also receive an object containing the results of functions which\r\n   * have completed so far as the first argument, if they have dependencies. If a\r\n   * task function has no dependencies, it will only be passed a callback.\r\n   *\r\n   * @name auto\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object. Each of its properties is either a\r\n   * function or an array of requirements, with the function itself the last item\r\n   * in the array. The object's key of a property serves as the name of the task\r\n   * defined by that property, i.e. can be used when specifying requirements for\r\n   * other tasks. The function receives one or two arguments:\r\n   * * a `results` object, containing the results of the previously executed\r\n   *   functions, only passed if the task has any dependencies,\r\n   * * a `callback(err, result)` function, which must be called when finished,\r\n   *   passing an `error` (which can be `null`) and the result of the function's\r\n   *   execution.\r\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\r\n   * determining the maximum number of tasks that can be run in parallel. By\r\n   * default, as many as possible.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback. Results are always returned; however, if an\r\n   * error occurs, no further `tasks` will be performed, and the results object\r\n   * will only contain partial results. Invoked with (err, results).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     // this function will just be passed a callback\r\n   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\r\n   *     showData: ['readData', function(results, cb) {\r\n   *         // results.readData is the file's contents\r\n   *         // ...\r\n   *     }]\r\n   * }, callback);\r\n   *\r\n   * async.auto({\r\n   *     get_data: function(callback) {\r\n   *         console.log('in get_data');\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         console.log('in make_folder');\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\r\n   *         console.log('in write_file', JSON.stringify(results));\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(results, callback) {\r\n   *         console.log('in email_link', JSON.stringify(results));\r\n   *         // once the file is written let's email a link to it...\r\n   *         // results.write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('results = ', results);\r\n   * });\r\n   */\r\n  function auto (tasks, concurrency, callback) {\r\n      if (typeof concurrency === 'function') {\r\n          // concurrency is optional, shift the args.\r\n          callback = concurrency;\r\n          concurrency = null;\r\n      }\r\n      callback = once(callback || noop);\r\n      var keys$$ = keys(tasks);\r\n      var numTasks = keys$$.length;\r\n      if (!numTasks) {\r\n          return callback(null);\r\n      }\r\n      if (!concurrency) {\r\n          concurrency = numTasks;\r\n      }\r\n\r\n      var results = {};\r\n      var runningTasks = 0;\r\n      var hasError = false;\r\n\r\n      var listeners = {};\r\n\r\n      var readyTasks = [];\r\n\r\n      // for cycle detection:\r\n      var readyToCheck = []; // tasks that have been identified as reachable\r\n      // without the possibility of returning to an ancestor task\r\n      var uncheckedDependencies = {};\r\n\r\n      baseForOwn(tasks, function (task, key) {\r\n          if (!isArray(task)) {\r\n              // no dependencies\r\n              enqueueTask(key, [task]);\r\n              readyToCheck.push(key);\r\n              return;\r\n          }\r\n\r\n          var dependencies = task.slice(0, task.length - 1);\r\n          var remainingDependencies = dependencies.length;\r\n          if (remainingDependencies === 0) {\r\n              enqueueTask(key, task);\r\n              readyToCheck.push(key);\r\n              return;\r\n          }\r\n          uncheckedDependencies[key] = remainingDependencies;\r\n\r\n          arrayEach(dependencies, function (dependencyName) {\r\n              if (!tasks[dependencyName]) {\r\n                  throw new Error('async.auto task `' + key + '` has a non-existent dependency in ' + dependencies.join(', '));\r\n              }\r\n              addListener(dependencyName, function () {\r\n                  remainingDependencies--;\r\n                  if (remainingDependencies === 0) {\r\n                      enqueueTask(key, task);\r\n                  }\r\n              });\r\n          });\r\n      });\r\n\r\n      checkForDeadlocks();\r\n      processQueue();\r\n\r\n      function enqueueTask(key, task) {\r\n          readyTasks.push(function () {\r\n              runTask(key, task);\r\n          });\r\n      }\r\n\r\n      function processQueue() {\r\n          if (readyTasks.length === 0 && runningTasks === 0) {\r\n              return callback(null, results);\r\n          }\r\n          while (readyTasks.length && runningTasks < concurrency) {\r\n              var run = readyTasks.shift();\r\n              run();\r\n          }\r\n      }\r\n\r\n      function addListener(taskName, fn) {\r\n          var taskListeners = listeners[taskName];\r\n          if (!taskListeners) {\r\n              taskListeners = listeners[taskName] = [];\r\n          }\r\n\r\n          taskListeners.push(fn);\r\n      }\r\n\r\n      function taskComplete(taskName) {\r\n          var taskListeners = listeners[taskName] || [];\r\n          arrayEach(taskListeners, function (fn) {\r\n              fn();\r\n          });\r\n          processQueue();\r\n      }\r\n\r\n      function runTask(key, task) {\r\n          if (hasError) return;\r\n\r\n          var taskCallback = onlyOnce(rest(function (err, args) {\r\n              runningTasks--;\r\n              if (args.length <= 1) {\r\n                  args = args[0];\r\n              }\r\n              if (err) {\r\n                  var safeResults = {};\r\n                  baseForOwn(results, function (val, rkey) {\r\n                      safeResults[rkey] = val;\r\n                  });\r\n                  safeResults[key] = args;\r\n                  hasError = true;\r\n                  listeners = [];\r\n\r\n                  callback(err, safeResults);\r\n              } else {\r\n                  results[key] = args;\r\n                  taskComplete(key);\r\n              }\r\n          }));\r\n\r\n          runningTasks++;\r\n          var taskFn = task[task.length - 1];\r\n          if (task.length > 1) {\r\n              taskFn(results, taskCallback);\r\n          } else {\r\n              taskFn(taskCallback);\r\n          }\r\n      }\r\n\r\n      function checkForDeadlocks() {\r\n          // Kahn's algorithm\r\n          // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\r\n          // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\r\n          var currentTask;\r\n          var counter = 0;\r\n          while (readyToCheck.length) {\r\n              currentTask = readyToCheck.pop();\r\n              counter++;\r\n              arrayEach(getDependents(currentTask), function (dependent) {\r\n                  if (! --uncheckedDependencies[dependent]) {\r\n                      readyToCheck.push(dependent);\r\n                  }\r\n              });\r\n          }\r\n\r\n          if (counter !== numTasks) {\r\n              throw new Error('async.auto cannot execute tasks due to a recursive dependency');\r\n          }\r\n      }\r\n\r\n      function getDependents(taskName) {\r\n          var result = [];\r\n          baseForOwn(tasks, function (task, key) {\r\n              if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\r\n                  result.push(key);\r\n              }\r\n          });\r\n          return result;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.map` for arrays without support for iteratee\r\n   * shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the new mapped array.\r\n   */\r\n  function arrayMap(array, iteratee) {\r\n    var index = -1,\r\n        length = array ? array.length : 0,\r\n        result = Array(length);\r\n\r\n    while (++index < length) {\r\n      result[index] = iteratee(array[index], index, array);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Copies the values of `source` to `array`.\r\n   *\r\n   * @private\r\n   * @param {Array} source The array to copy values from.\r\n   * @param {Array} [array=[]] The array to copy values to.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function copyArray(source, array) {\r\n    var index = -1,\r\n        length = source.length;\r\n\r\n    array || (array = Array(length));\r\n    while (++index < length) {\r\n      array[index] = source[index];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Checks if `value` is a global object.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {null|Object} Returns `value` if it's a global object, else `null`.\r\n   */\r\n  function checkGlobal(value) {\r\n    return (value && value.Object === Object) ? value : null;\r\n  }\r\n\r\n  /** Detect free variable `global` from Node.js. */\r\n  var freeGlobal = checkGlobal(typeof global == 'object' && global);\r\n\r\n  /** Detect free variable `self`. */\r\n  var freeSelf = checkGlobal(typeof self == 'object' && self);\r\n\r\n  /** Detect `this` as the global object. */\r\n  var thisGlobal = checkGlobal(typeof this == 'object' && this);\r\n\r\n  /** Used as a reference to the global object. */\r\n  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();\r\n\r\n  /** Built-in value references. */\r\n  var Symbol$1 = root.Symbol;\r\n\r\n  /** Used as references for various `Number` constants. */\r\n  var INFINITY$1 = 1 / 0;\r\n\r\n  /** Used to convert symbols to primitives and strings. */\r\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\r\n  var symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n  /**\r\n   * The base implementation of `_.toString` which doesn't convert nullish\r\n   * values to empty strings.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to process.\r\n   * @returns {string} Returns the string.\r\n   */\r\n  function baseToString(value) {\r\n    // Exit early for strings to avoid a performance hit in some environments.\r\n    if (typeof value == 'string') {\r\n      return value;\r\n    }\r\n    if (isSymbol(value)) {\r\n      return symbolToString ? symbolToString.call(value) : '';\r\n    }\r\n    var result = (value + '');\r\n    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.slice` without an iteratee call guard.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to slice.\r\n   * @param {number} [start=0] The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the slice of `array`.\r\n   */\r\n  function baseSlice(array, start, end) {\r\n    var index = -1,\r\n        length = array.length;\r\n\r\n    if (start < 0) {\r\n      start = -start > length ? 0 : (length + start);\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n      end += length;\r\n    }\r\n    length = start > end ? 0 : ((end - start) >>> 0);\r\n    start >>>= 0;\r\n\r\n    var result = Array(length);\r\n    while (++index < length) {\r\n      result[index] = array[index + start];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Casts `array` to a slice if it's needed.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {number} start The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the cast slice.\r\n   */\r\n  function castSlice(array, start, end) {\r\n    var length = array.length;\r\n    end = end === undefined ? length : end;\r\n    return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n  }\r\n\r\n  /**\r\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the last unmatched string symbol.\r\n   */\r\n  function charsEndIndex(strSymbols, chrSymbols) {\r\n    var index = strSymbols.length;\r\n\r\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the first unmatched string symbol.\r\n   */\r\n  function charsStartIndex(strSymbols, chrSymbols) {\r\n    var index = -1,\r\n        length = strSymbols.length;\r\n\r\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n    return index;\r\n  }\r\n\r\n  /** Used to compose unicode character classes. */\r\n  var rsAstralRange = '\\\\ud800-\\\\udfff';\r\n  var rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\r\n  var rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\r\n  var rsVarRange = '\\\\ufe0e\\\\ufe0f';\r\n  var rsAstral = '[' + rsAstralRange + ']';\r\n  var rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';\r\n  var rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\r\n  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\r\n  var rsNonAstral = '[^' + rsAstralRange + ']';\r\n  var rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\r\n  var rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\r\n  var rsZWJ = '\\\\u200d';\r\n  var reOptMod = rsModifier + '?';\r\n  var rsOptVar = '[' + rsVarRange + ']?';\r\n  var rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\r\n  var rsSeq = rsOptVar + reOptMod + rsOptJoin;\r\n  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\n  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n  /**\r\n   * Converts `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\r\n  function stringToArray(string) {\r\n    return string.match(reComplexSymbol);\r\n  }\r\n\r\n  /**\r\n   * Converts `value` to a string. An empty string is returned for `null`\r\n   * and `undefined` values. The sign of `-0` is preserved.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to process.\r\n   * @returns {string} Returns the string.\r\n   * @example\r\n   *\r\n   * _.toString(null);\r\n   * // => ''\r\n   *\r\n   * _.toString(-0);\r\n   * // => '-0'\r\n   *\r\n   * _.toString([1, 2, 3]);\r\n   * // => '1,2,3'\r\n   */\r\n  function toString(value) {\r\n    return value == null ? '' : baseToString(value);\r\n  }\r\n\r\n  /** Used to match leading and trailing whitespace. */\r\n  var reTrim$1 = /^\\s+|\\s+$/g;\r\n\r\n  /**\r\n   * Removes leading and trailing whitespace or specified characters from `string`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 3.0.0\r\n   * @category String\r\n   * @param {string} [string=''] The string to trim.\r\n   * @param {string} [chars=whitespace] The characters to trim.\r\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n   * @returns {string} Returns the trimmed string.\r\n   * @example\r\n   *\r\n   * _.trim('  abc  ');\r\n   * // => 'abc'\r\n   *\r\n   * _.trim('-_-abc-_-', '_-');\r\n   * // => 'abc'\r\n   *\r\n   * _.map(['  foo  ', '  bar  '], _.trim);\r\n   * // => ['foo', 'bar']\r\n   */\r\n  function trim(string, chars, guard) {\r\n    string = toString(string);\r\n    if (string && (guard || chars === undefined)) {\r\n      return string.replace(reTrim$1, '');\r\n    }\r\n    if (!string || !(chars = baseToString(chars))) {\r\n      return string;\r\n    }\r\n    var strSymbols = stringToArray(string),\r\n        chrSymbols = stringToArray(chars),\r\n        start = charsStartIndex(strSymbols, chrSymbols),\r\n        end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n    return castSlice(strSymbols, start, end).join('');\r\n  }\r\n\r\n  var FN_ARGS = /^(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\n  var FN_ARG_SPLIT = /,/;\r\n  var FN_ARG = /(=.+)?(\\s*)$/;\r\n  var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n\r\n  function parseParams(func) {\r\n      func = func.toString().replace(STRIP_COMMENTS, '');\r\n      func = func.match(FN_ARGS)[2].replace(' ', '');\r\n      func = func ? func.split(FN_ARG_SPLIT) : [];\r\n      func = func.map(function (arg) {\r\n          return trim(arg.replace(FN_ARG, ''));\r\n      });\r\n      return func;\r\n  }\r\n\r\n  /**\r\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\r\n   * tasks are specified as parameters to the function, after the usual callback\r\n   * parameter, with the parameter names matching the names of the tasks it\r\n   * depends on. This can provide even more readable task graphs which can be\r\n   * easier to maintain.\r\n   *\r\n   * If a final callback is specified, the task results are similarly injected,\r\n   * specified as named parameters after the initial error parameter.\r\n   *\r\n   * The autoInject function is purely syntactic sugar and its semantics are\r\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name autoInject\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.auto]{@link module:ControlFlow.auto}\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object, each of whose properties is a function of\r\n   * the form 'func([dependencies...], callback). The object's key of a property\r\n   * serves as the name of the task defined by that property, i.e. can be used\r\n   * when specifying requirements for other tasks.\r\n   * * The `callback` parameter is a `callback(err, result)` which must be called\r\n   *   when finished, passing an `error` (which can be `null`) and the result of\r\n   *   the function's execution. The remaining parameters name other tasks on\r\n   *   which the task is dependent, and the results from those tasks are the\r\n   *   arguments of those parameters.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback, and a `results` object with any completed\r\n   * task results, similar to `auto`.\r\n   * @example\r\n   *\r\n   * //  The example from `auto` can be rewritten as follows:\r\n   * async.autoInject({\r\n   *     get_data: function(callback) {\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: function(get_data, make_folder, callback) {\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     },\r\n   *     email_link: function(write_file, callback) {\r\n   *         // once the file is written let's email a link to it...\r\n   *         // write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   *\r\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\r\n   * // will not work with plain functions, since the parameter names will be\r\n   * // collapsed to a single letter identifier.  To work around this, you can\r\n   * // explicitly specify the names of the parameters your task function needs\r\n   * // in an array, similar to Angular.js dependency injection.\r\n   *\r\n   * // This still has an advantage over plain `auto`, since the results a task\r\n   * // depends on are still spread into arguments.\r\n   * async.autoInject({\r\n   *     //...\r\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(write_file, callback) {\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   *     //...\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   */\r\n  function autoInject(tasks, callback) {\r\n      var newTasks = {};\r\n\r\n      baseForOwn(tasks, function (taskFn, key) {\r\n          var params;\r\n\r\n          if (isArray(taskFn)) {\r\n              params = copyArray(taskFn);\r\n              taskFn = params.pop();\r\n\r\n              newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\r\n          } else if (taskFn.length === 1) {\r\n              // no dependencies, use the function as-is\r\n              newTasks[key] = taskFn;\r\n          } else {\r\n              params = parseParams(taskFn);\r\n              if (taskFn.length === 0 && params.length === 0) {\r\n                  throw new Error(\"autoInject task functions require explicit parameters.\");\r\n              }\r\n\r\n              params.pop();\r\n\r\n              newTasks[key] = params.concat(newTask);\r\n          }\r\n\r\n          function newTask(results, taskCb) {\r\n              var newArgs = arrayMap(params, function (name) {\r\n                  return results[name];\r\n              });\r\n              newArgs.push(taskCb);\r\n              taskFn.apply(null, newArgs);\r\n          }\r\n      });\r\n\r\n      auto(newTasks, callback);\r\n  }\r\n\r\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\r\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\r\n\r\n  function fallback(fn) {\r\n      setTimeout(fn, 0);\r\n  }\r\n\r\n  function wrap(defer) {\r\n      return rest(function (fn, args) {\r\n          defer(function () {\r\n              fn.apply(null, args);\r\n          });\r\n      });\r\n  }\r\n\r\n  var _defer;\r\n\r\n  if (hasSetImmediate) {\r\n      _defer = setImmediate;\r\n  } else if (hasNextTick) {\r\n      _defer = process.nextTick;\r\n  } else {\r\n      _defer = fallback;\r\n  }\r\n\r\n  var setImmediate$1 = wrap(_defer);\r\n\r\n  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\r\n  // used for queues. This implementation assumes that the node provided by the user can be modified\r\n  // to adjust the next and last properties. We implement only the minimal functionality\r\n  // for queue support.\r\n  function DLL() {\r\n      this.head = this.tail = null;\r\n      this.length = 0;\r\n  }\r\n\r\n  function setInitial(dll, node) {\r\n      dll.length = 1;\r\n      dll.head = dll.tail = node;\r\n  }\r\n\r\n  DLL.prototype.removeLink = function (node) {\r\n      if (node.prev) node.prev.next = node.next;else this.head = node.next;\r\n      if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\r\n\r\n      node.prev = node.next = null;\r\n      this.length -= 1;\r\n      return node;\r\n  };\r\n\r\n  DLL.prototype.empty = DLL;\r\n\r\n  DLL.prototype.insertAfter = function (node, newNode) {\r\n      newNode.prev = node;\r\n      newNode.next = node.next;\r\n      if (node.next) node.next.prev = newNode;else this.tail = newNode;\r\n      node.next = newNode;\r\n      this.length += 1;\r\n  };\r\n\r\n  DLL.prototype.insertBefore = function (node, newNode) {\r\n      newNode.prev = node.prev;\r\n      newNode.next = node;\r\n      if (node.prev) node.prev.next = newNode;else this.head = newNode;\r\n      node.prev = newNode;\r\n      this.length += 1;\r\n  };\r\n\r\n  DLL.prototype.unshift = function (node) {\r\n      if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\r\n  };\r\n\r\n  DLL.prototype.push = function (node) {\r\n      if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\r\n  };\r\n\r\n  DLL.prototype.shift = function () {\r\n      return this.head && this.removeLink(this.head);\r\n  };\r\n\r\n  DLL.prototype.pop = function () {\r\n      return this.tail && this.removeLink(this.tail);\r\n  };\r\n\r\n  function queue(worker, concurrency, payload) {\r\n      if (concurrency == null) {\r\n          concurrency = 1;\r\n      } else if (concurrency === 0) {\r\n          throw new Error('Concurrency must not be zero');\r\n      }\r\n\r\n      function _insert(data, pos, callback) {\r\n          if (callback != null && typeof callback !== 'function') {\r\n              throw new Error('task callback must be a function');\r\n          }\r\n          q.started = true;\r\n          if (!isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if (data.length === 0 && q.idle()) {\r\n              // call drain immediately if there are no tasks\r\n              return setImmediate$1(function () {\r\n                  q.drain();\r\n              });\r\n          }\r\n          arrayEach(data, function (task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: callback || noop\r\n              };\r\n\r\n              if (pos) {\r\n                  q._tasks.unshift(item);\r\n              } else {\r\n                  q._tasks.push(item);\r\n              }\r\n          });\r\n          setImmediate$1(q.process);\r\n      }\r\n\r\n      function _next(tasks) {\r\n          return rest(function (args) {\r\n              workers -= 1;\r\n\r\n              arrayEach(tasks, function (task) {\r\n                  arrayEach(workersList, function (worker, index) {\r\n                      if (worker === task) {\r\n                          workersList.splice(index, 1);\r\n                          return false;\r\n                      }\r\n                  });\r\n\r\n                  task.callback.apply(task, args);\r\n\r\n                  if (args[0] != null) {\r\n                      q.error(args[0], task.data);\r\n                  }\r\n              });\r\n\r\n              if (workers <= q.concurrency - q.buffer) {\r\n                  q.unsaturated();\r\n              }\r\n\r\n              if (q.idle()) {\r\n                  q.drain();\r\n              }\r\n              q.process();\r\n          });\r\n      }\r\n\r\n      var workers = 0;\r\n      var workersList = [];\r\n      var q = {\r\n          _tasks: new DLL(),\r\n          concurrency: concurrency,\r\n          payload: payload,\r\n          saturated: noop,\r\n          unsaturated: noop,\r\n          buffer: concurrency / 4,\r\n          empty: noop,\r\n          drain: noop,\r\n          error: noop,\r\n          started: false,\r\n          paused: false,\r\n          push: function (data, callback) {\r\n              _insert(data, false, callback);\r\n          },\r\n          kill: function () {\r\n              q.drain = noop;\r\n              q._tasks.empty();\r\n          },\r\n          unshift: function (data, callback) {\r\n              _insert(data, true, callback);\r\n          },\r\n          process: function () {\r\n              while (!q.paused && workers < q.concurrency && q._tasks.length) {\r\n                  var tasks = [],\r\n                      data = [];\r\n                  var l = q._tasks.length;\r\n                  if (q.payload) l = Math.min(l, q.payload);\r\n                  for (var i = 0; i < l; i++) {\r\n                      var node = q._tasks.shift();\r\n                      tasks.push(node);\r\n                      data.push(node.data);\r\n                  }\r\n\r\n                  if (q._tasks.length === 0) {\r\n                      q.empty();\r\n                  }\r\n                  workers += 1;\r\n                  workersList.push(tasks[0]);\r\n\r\n                  if (workers === q.concurrency) {\r\n                      q.saturated();\r\n                  }\r\n\r\n                  var cb = onlyOnce(_next(tasks));\r\n                  worker(data, cb);\r\n              }\r\n          },\r\n          length: function () {\r\n              return q._tasks.length;\r\n          },\r\n          running: function () {\r\n              return workers;\r\n          },\r\n          workersList: function () {\r\n              return workersList;\r\n          },\r\n          idle: function () {\r\n              return q._tasks.length + workers === 0;\r\n          },\r\n          pause: function () {\r\n              q.paused = true;\r\n          },\r\n          resume: function () {\r\n              if (q.paused === false) {\r\n                  return;\r\n              }\r\n              q.paused = false;\r\n              var resumeCount = Math.min(q.concurrency, q._tasks.length);\r\n              // Need to call q.process once per concurrent\r\n              // worker to preserve full concurrency after pause\r\n              for (var w = 1; w <= resumeCount; w++) {\r\n                  setImmediate$1(q.process);\r\n              }\r\n          }\r\n      };\r\n      return q;\r\n  }\r\n\r\n  /**\r\n   * A cargo of tasks for the worker function to complete. Cargo inherits all of\r\n   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\r\n   * @typedef {Object} CargoObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - A function returning the number of items\r\n   * waiting to be processed. Invoke like `cargo.length()`.\r\n   * @property {number} payload - An `integer` for determining how many tasks\r\n   * should be process per round. This property can be changed after a `cargo` is\r\n   * created to alter the payload on-the-fly.\r\n   * @property {Function} push - Adds `task` to the `queue`. The callback is\r\n   * called once the `worker` has finished processing the task. Instead of a\r\n   * single task, an array of `tasks` can be submitted. The respective callback is\r\n   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\r\n   * @property {Function} saturated - A callback that is called when the\r\n   * `queue.length()` hits the concurrency and further tasks will be queued.\r\n   * @property {Function} empty - A callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - A callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke like `cargo.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\r\n   */\r\n\r\n  /**\r\n   * Creates a `cargo` object with the specified payload. Tasks added to the\r\n   * cargo will be processed altogether (up to the `payload` limit). If the\r\n   * `worker` is in progress, the task is queued until it becomes available. Once\r\n   * the `worker` has completed some tasks, each callback of those tasks is\r\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\r\n   * for how `cargo` and `queue` work.\r\n   *\r\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\r\n   * at a time, cargo passes an array of tasks to a single worker, repeating\r\n   * when the worker is finished.\r\n   *\r\n   * @name cargo\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {Function} worker - An asynchronous function for processing an array\r\n   * of queued tasks, which must call its `callback(err)` argument when finished,\r\n   * with an optional `err` argument. Invoked with `(tasks, callback)`.\r\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\r\n   * how many tasks should be processed per round; if omitted, the default is\r\n   * unlimited.\r\n   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the cargo and inner queue.\r\n   * @example\r\n   *\r\n   * // create a cargo object with payload 2\r\n   * var cargo = async.cargo(function(tasks, callback) {\r\n   *     for (var i=0; i<tasks.length; i++) {\r\n   *         console.log('hello ' + tasks[i].name);\r\n   *     }\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // add some items\r\n   * cargo.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * cargo.push({name: 'bar'}, function(err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   * cargo.push({name: 'baz'}, function(err) {\r\n   *     console.log('finished processing baz');\r\n   * });\r\n   */\r\n  function cargo(worker, payload) {\r\n    return queue(worker, 1, payload);\r\n  }\r\n\r\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name eachOfLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A function to apply to each\r\n   * item in `coll`. The `key` is the item's key, or index in the case of an\r\n   * array. The iteratee is passed a `callback(err)` which must be called once it\r\n   * has completed. If no error has occurred, the callback should be run without\r\n   * arguments or with an explicit `null` argument. Invoked with\r\n   * (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\r\n  function eachOfLimit(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, iteratee, callback);\r\n  }\r\n\r\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachOfSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`. The\r\n   * `key` is the item's key, or index in the case of an array. The iteratee is\r\n   * passed a `callback(err)` which must be called once it has completed. If no\r\n   * error has occurred, the callback should be run without arguments or with an\r\n   * explicit `null` argument. Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Invoked with (err).\r\n   */\r\n  var eachOfSeries = doLimit(eachOfLimit, 1);\r\n\r\n  /**\r\n   * Reduces `coll` into a single value using an async `iteratee` to return each\r\n   * successive step. `memo` is the initial state of the reduction. This function\r\n   * only operates in series.\r\n   *\r\n   * For performance reasons, it may make sense to split a call to this function\r\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\r\n   * results. This function is for situations where each step in the reduction\r\n   * needs to be async; if you can get the data before reducing it, then it's\r\n   * probably a good idea to do so.\r\n   *\r\n   * @name reduce\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias inject\r\n   * @alias foldl\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {Function} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction. The `iteratee` is passed a\r\n   * `callback(err, reduction)` which accepts an optional error as its first\r\n   * argument, and the state of the reduction as the second. If an error is\r\n   * passed to the callback, the reduction is stopped and the main `callback` is\r\n   * immediately called with the error. Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.reduce([1,2,3], 0, function(memo, item, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         callback(null, memo + item)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to the last value of memo, which is 6\r\n   * });\r\n   */\r\n  function reduce(coll, memo, iteratee, callback) {\r\n      callback = once(callback || noop);\r\n      eachOfSeries(coll, function (x, i, callback) {\r\n          iteratee(memo, x, function (err, v) {\r\n              memo = v;\r\n              callback(err);\r\n          });\r\n      }, function (err) {\r\n          callback(err, memo);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Version of the compose function that is more natural to read. Each function\r\n   * consumes the return value of the previous function. It is the equivalent of\r\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name seq\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.compose]{@link module:ControlFlow.compose}\r\n   * @category Control Flow\r\n   * @param {...Function} functions - the asynchronous functions to compose\r\n   * @returns {Function} a function that composes the `functions` in order\r\n   * @example\r\n   *\r\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\r\n   * // Part of an app, that fetches cats of the logged user.\r\n   * // This example uses `seq` function to avoid overnesting and error\r\n   * // handling clutter.\r\n   * app.get('/cats', function(request, response) {\r\n   *     var User = request.models.User;\r\n   *     async.seq(\r\n   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\r\n   *         function(user, fn) {\r\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\r\n   *         }\r\n   *     )(req.session.user_id, function (err, cats) {\r\n   *         if (err) {\r\n   *             console.error(err);\r\n   *             response.json({ status: 'error', message: err.message });\r\n   *         } else {\r\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\r\n   *         }\r\n   *     });\r\n   * });\r\n   */\r\n  var seq = rest(function seq(functions) {\r\n      return rest(function (args) {\r\n          var that = this;\r\n\r\n          var cb = args[args.length - 1];\r\n          if (typeof cb == 'function') {\r\n              args.pop();\r\n          } else {\r\n              cb = noop;\r\n          }\r\n\r\n          reduce(functions, args, function (newargs, fn, cb) {\r\n              fn.apply(that, newargs.concat([rest(function (err, nextargs) {\r\n                  cb(err, nextargs);\r\n              })]));\r\n          }, function (err, results) {\r\n              cb.apply(that, [err].concat(results));\r\n          });\r\n      });\r\n  });\r\n\r\n  /**\r\n   * Creates a function which is a composition of the passed asynchronous\r\n   * functions. Each function consumes the return value of the function that\r\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\r\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name compose\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {...Function} functions - the asynchronous functions to compose\r\n   * @returns {Function} an asynchronous function that is the composed\r\n   * asynchronous `functions`\r\n   * @example\r\n   *\r\n   * function add1(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n + 1);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * function mul3(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n * 3);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * var add1mul3 = async.compose(mul3, add1);\r\n   * add1mul3(4, function (err, result) {\r\n   *     // result now equals 15\r\n   * });\r\n   */\r\n  var compose = rest(function (args) {\r\n    return seq.apply(null, args.reverse());\r\n  });\r\n\r\n  function concat$1(eachfn, arr, fn, callback) {\r\n      var result = [];\r\n      eachfn(arr, function (x, index, cb) {\r\n          fn(x, function (err, y) {\r\n              result = result.concat(y || []);\r\n              cb(err);\r\n          });\r\n      }, function (err) {\r\n          callback(err, result);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\r\n   * to the iteratee.\r\n   *\r\n   * @name eachOf\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEachOf\r\n   * @category Collection\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each\r\n   * item in `coll`. The `key` is the item's key, or index in the case of an\r\n   * array. The iteratee is passed a `callback(err)` which must be called once it\r\n   * has completed. If no error has occurred, the callback should be run without\r\n   * arguments or with an explicit `null` argument. Invoked with\r\n   * (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\n   * var configs = {};\r\n   *\r\n   * async.forEachOf(obj, function (value, key, callback) {\r\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\r\n   *         if (err) return callback(err);\r\n   *         try {\r\n   *             configs[key] = JSON.parse(data);\r\n   *         } catch (e) {\r\n   *             return callback(e);\r\n   *         }\r\n   *         callback();\r\n   *     });\r\n   * }, function (err) {\r\n   *     if (err) console.error(err.message);\r\n   *     // configs is now a map of JSON data\r\n   *     doSomethingWith(configs);\r\n   * });\r\n   */\r\n  var eachOf = doLimit(eachOfLimit, Infinity);\r\n\r\n  function doParallel(fn) {\r\n      return function (obj, iteratee, callback) {\r\n          return fn(eachOf, obj, iteratee, callback);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\r\n   * the concatenated list. The `iteratee`s are called in parallel, and the\r\n   * results are concatenated as they return. There is no guarantee that the\r\n   * results array will be returned in the original order of `coll` passed to the\r\n   * `iteratee` function.\r\n   *\r\n   * @name concat\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, results)` which must be called once\r\n   * it has completed with an error (which can be `null`) and an array of results.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   * @example\r\n   *\r\n   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\r\n   *     // files is now a list of filenames that exist in the 3 directories\r\n   * });\r\n   */\r\n  var concat = doParallel(concat$1);\r\n\r\n  function doSeries(fn) {\r\n      return function (obj, iteratee, callback) {\r\n          return fn(eachOfSeries, obj, iteratee, callback);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\r\n   *\r\n   * @name concatSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.concat]{@link module:Collections.concat}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, results)` which must be called once\r\n   * it has completed with an error (which can be `null`) and an array of results.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   */\r\n  var concatSeries = doSeries(concat$1);\r\n\r\n  /**\r\n   * Returns a function that when called, calls-back with the values provided.\r\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\r\n   * [`auto`]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name constant\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\r\n   * callback with.\r\n   * @returns {Function} Returns a function that when invoked, automatically\r\n   * invokes the callback with the previous given arguments.\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(42),\r\n   *     function (value, next) {\r\n   *         // value === 42\r\n   *     },\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(filename, \"utf8\"),\r\n   *     fs.readFile,\r\n   *     function (fileData, next) {\r\n   *         //...\r\n   *     }\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.auto({\r\n   *     hostname: async.constant(\"https://server.net/\"),\r\n   *     port: findFreePort,\r\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\r\n   *         startServer(options, cb);\r\n   *     }],\r\n   *     //...\r\n   * }, callback);\r\n   */\r\n  var constant = rest(function (values) {\r\n      var args = [null].concat(values);\r\n      return initialParams(function (ignoredArgs, callback) {\r\n          return callback.apply(this, args);\r\n      });\r\n  });\r\n\r\n  /**\r\n   * This method returns the first argument given to it.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Util\r\n   * @param {*} value Any value.\r\n   * @returns {*} Returns `value`.\r\n   * @example\r\n   *\r\n   * var object = { 'user': 'fred' };\r\n   *\r\n   * console.log(_.identity(object) === object);\r\n   * // => true\r\n   */\r\n  function identity(value) {\r\n    return value;\r\n  }\r\n\r\n  function _createTester(eachfn, check, getResult) {\r\n      return function (arr, limit, iteratee, cb) {\r\n          function done(err) {\r\n              if (cb) {\r\n                  if (err) {\r\n                      cb(err);\r\n                  } else {\r\n                      cb(null, getResult(false));\r\n                  }\r\n              }\r\n          }\r\n          function wrappedIteratee(x, _, callback) {\r\n              if (!cb) return callback();\r\n              iteratee(x, function (err, v) {\r\n                  if (cb) {\r\n                      if (err) {\r\n                          cb(err);\r\n                          cb = iteratee = false;\r\n                      } else if (check(v)) {\r\n                          cb(null, getResult(true, x));\r\n                          cb = iteratee = false;\r\n                      }\r\n                  }\r\n                  callback();\r\n              });\r\n          }\r\n          if (arguments.length > 3) {\r\n              cb = cb || noop;\r\n              eachfn(arr, limit, wrappedIteratee, done);\r\n          } else {\r\n              cb = iteratee;\r\n              cb = cb || noop;\r\n              iteratee = limit;\r\n              eachfn(arr, wrappedIteratee, done);\r\n          }\r\n      };\r\n  }\r\n\r\n  function _findGetResult(v, x) {\r\n      return x;\r\n  }\r\n\r\n  /**\r\n   * Returns the first value in `coll` that passes an async truth test. The\r\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\r\n   * `true` will fire the detect `callback` with that result. That means the\r\n   * result might not be the first item in the original `coll` (in terms of order)\r\n   * that passes the test.\r\n\r\n   * If order within the original `coll` is important, then look at\r\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\r\n   *\r\n   * @name detect\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias find\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, truthValue)` which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.detect(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result now equals the first file in the list that exists\r\n   * });\r\n   */\r\n  var detect = _createTester(eachOf, identity, _findGetResult);\r\n\r\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name detectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findLimit\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, truthValue)` which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\r\n  var detectLimit = _createTester(eachOfLimit, identity, _findGetResult);\r\n\r\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\r\n   *\r\n   * @name detectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findSeries\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, truthValue)` which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\r\n  var detectSeries = _createTester(eachOfSeries, identity, _findGetResult);\r\n\r\n  function consoleFunc(name) {\r\n      return rest(function (fn, args) {\r\n          fn.apply(null, args.concat([rest(function (err, args) {\r\n              if (typeof console === 'object') {\r\n                  if (err) {\r\n                      if (console.error) {\r\n                          console.error(err);\r\n                      }\r\n                  } else if (console[name]) {\r\n                      arrayEach(args, function (x) {\r\n                          console[name](x);\r\n                      });\r\n                  }\r\n              }\r\n          })]));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Logs the result of an `async` function to the `console` using `console.dir`\r\n   * to display the properties of the resulting object. Only works in Node.js or\r\n   * in browsers that support `console.dir` and `console.error` (such as FF and\r\n   * Chrome). If multiple arguments are returned from the async function,\r\n   * `console.dir` is called on each argument in order.\r\n   *\r\n   * @name dir\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} function - The function you want to eventually apply all\r\n   * arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, {hello: name});\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.dir(hello, 'world');\r\n   * {hello: 'world'}\r\n   */\r\n  var dir = consoleFunc('dir');\r\n\r\n  /**\r\n   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `fn` are switched.\r\n   *\r\n   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\r\n   * @name doDuring\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.during]{@link module:ControlFlow.during}\r\n   * @category Control Flow\r\n   * @param {Function} fn - A function which is called each time `test` passes.\r\n   * The function is passed a `callback(err)`, which must be called once it has\r\n   * completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (...args, callback), where `...args` are the\r\n   * non-error args from the previous callback of `fn`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error if one occured, otherwise `null`.\r\n   */\r\n  function doDuring(fn, test, callback) {\r\n      callback = onlyOnce(callback || noop);\r\n\r\n      var next = rest(function (err, args) {\r\n          if (err) return callback(err);\r\n          args.push(check);\r\n          test.apply(this, args);\r\n      });\r\n\r\n      function check(err, truth) {\r\n          if (err) return callback(err);\r\n          if (!truth) return callback(null);\r\n          fn(next);\r\n      }\r\n\r\n      check(null, true);\r\n  }\r\n\r\n  /**\r\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `iteratee` are switched.\r\n   *\r\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\r\n   *\r\n   * @name doWhilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {Function} iteratee - A function which is called each time `test`\r\n   * passes. The function is passed a `callback(err)`, which must be called once\r\n   * it has completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `iteratee`. Invoked with Invoked with the non-error callback\r\n   * results of `iteratee`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `iteratee` has stopped.\r\n   * `callback` will be passed an error and any arguments passed to the final\r\n   * `iteratee`'s callback. Invoked with (err, [results]);\r\n   */\r\n  function doWhilst(iteratee, test, callback) {\r\n      callback = onlyOnce(callback || noop);\r\n      var next = rest(function (err, args) {\r\n          if (err) return callback(err);\r\n          if (test.apply(this, args)) return iteratee(next);\r\n          callback.apply(null, [null].concat(args));\r\n      });\r\n      iteratee(next);\r\n  }\r\n\r\n  /**\r\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\r\n   * argument ordering differs from `until`.\r\n   *\r\n   * @name doUntil\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\r\n   * @category Control Flow\r\n   * @param {Function} fn - A function which is called each time `test` fails.\r\n   * The function is passed a `callback(err)`, which must be called once it has\r\n   * completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `fn`. Invoked with the non-error callback results of `fn`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `fn`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\r\n  function doUntil(fn, test, callback) {\r\n      doWhilst(fn, function () {\r\n          return !test.apply(this, arguments);\r\n      }, callback);\r\n  }\r\n\r\n  /**\r\n   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\r\n   * is passed a callback in the form of `function (err, truth)`. If error is\r\n   * passed to `test` or `fn`, the main callback is immediately called with the\r\n   * value of the error.\r\n   *\r\n   * @name during\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {Function} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (callback).\r\n   * @param {Function} fn - A function which is called each time `test` passes.\r\n   * The function is passed a `callback(err)`, which must be called once it has\r\n   * completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error, if one occured, otherwise `null`.\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   *\r\n   * async.during(\r\n   *     function (callback) {\r\n   *         return callback(null, count < 5);\r\n   *     },\r\n   *     function (callback) {\r\n   *         count++;\r\n   *         setTimeout(callback, 1000);\r\n   *     },\r\n   *     function (err) {\r\n   *         // 5 seconds have passed\r\n   *     }\r\n   * );\r\n   */\r\n  function during(test, fn, callback) {\r\n      callback = onlyOnce(callback || noop);\r\n\r\n      function next(err) {\r\n          if (err) return callback(err);\r\n          test(check);\r\n      }\r\n\r\n      function check(err, truth) {\r\n          if (err) return callback(err);\r\n          if (!truth) return callback(null);\r\n          fn(next);\r\n      }\r\n\r\n      test(check);\r\n  }\r\n\r\n  function _withoutIndex(iteratee) {\r\n      return function (value, index, callback) {\r\n          return iteratee(value, callback);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name eachLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A colleciton to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`. The\r\n   * iteratee is passed a `callback(err)` which must be called once it has\r\n   * completed. If no error has occurred, the `callback` should be run without\r\n   * arguments or with an explicit `null` argument. The array index is not passed\r\n   * to the iteratee. Invoked with (item, callback). If you need the index, use\r\n   * `eachOfLimit`.\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\r\n  function eachLimit(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, _withoutIndex(iteratee), callback);\r\n  }\r\n\r\n  /**\r\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n   * The `iteratee` is called with an item from the list, and a callback for when\r\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n   * main `callback` (for the `each` function) is immediately called with the\r\n   * error.\r\n   *\r\n   * Note, that since this function applies `iteratee` to each item in parallel,\r\n   * there is no guarantee that the iteratee functions will complete in order.\r\n   *\r\n   * @name each\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEach\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item\r\n   * in `coll`. The iteratee is passed a `callback(err)` which must be called once\r\n   * it has completed. If no error has occurred, the `callback` should be run\r\n   * without arguments or with an explicit `null` argument. The array index is not\r\n   * passed to the iteratee. Invoked with (item, callback). If you need the index,\r\n   * use `eachOf`.\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * // assuming openFiles is an array of file names and saveFile is a function\r\n   * // to save the modified contents of that file:\r\n   *\r\n   * async.each(openFiles, saveFile, function(err){\r\n   *   // if any of the saves produced an error, err would equal that error\r\n   * });\r\n   *\r\n   * // assuming openFiles is an array of file names\r\n   * async.each(openFiles, function(file, callback) {\r\n   *\r\n   *     // Perform operation on file here.\r\n   *     console.log('Processing file ' + file);\r\n   *\r\n   *     if( file.length > 32 ) {\r\n   *       console.log('This file name is too long');\r\n   *       callback('File name too long');\r\n   *     } else {\r\n   *       // Do work to process file here\r\n   *       console.log('File processed');\r\n   *       callback();\r\n   *     }\r\n   * }, function(err) {\r\n   *     // if any of the file processing produced an error, err would equal that error\r\n   *     if( err ) {\r\n   *       // One of the iterations produced an error.\r\n   *       // All processing will now stop.\r\n   *       console.log('A file failed to process');\r\n   *     } else {\r\n   *       console.log('All files have been processed successfully');\r\n   *     }\r\n   * });\r\n   */\r\n  var each = doLimit(eachLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each\r\n   * item in `coll`. The iteratee is passed a `callback(err)` which must be called\r\n   * once it has completed. If no error has occurred, the `callback` should be run\r\n   * without arguments or with an explicit `null` argument. The array index is\r\n   * not passed to the iteratee. Invoked with (item, callback). If you need the\r\n   * index, use `eachOfSeries`.\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\r\n  var eachSeries = doLimit(eachLimit, 1);\r\n\r\n  /**\r\n   * Wrap an async function and ensure it calls its callback on a later tick of\r\n   * the event loop.  If the function already calls its callback on a next tick,\r\n   * no extra deferral is added. This is useful for preventing stack overflows\r\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\r\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\r\n   * contained.\r\n   *\r\n   * @name ensureAsync\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} fn - an async function, one that expects a node-style\r\n   * callback as its last argument.\r\n   * @returns {Function} Returns a wrapped function with the exact same call\r\n   * signature as the function passed in.\r\n   * @example\r\n   *\r\n   * function sometimesAsync(arg, callback) {\r\n   *     if (cache[arg]) {\r\n   *         return callback(null, cache[arg]); // this would be synchronous!!\r\n   *     } else {\r\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\r\n   *     }\r\n   * }\r\n   *\r\n   * // this has a risk of stack overflows if many results are cached in a row\r\n   * async.mapSeries(args, sometimesAsync, done);\r\n   *\r\n   * // this will defer sometimesAsync's callback if necessary,\r\n   * // preventing stack overflows\r\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\r\n   */\r\n  function ensureAsync(fn) {\r\n      return initialParams(function (args, callback) {\r\n          var sync = true;\r\n          args.push(function () {\r\n              var innerArgs = arguments;\r\n              if (sync) {\r\n                  setImmediate$1(function () {\r\n                      callback.apply(null, innerArgs);\r\n                  });\r\n              } else {\r\n                  callback.apply(null, innerArgs);\r\n              }\r\n          });\r\n          fn.apply(this, args);\r\n          sync = false;\r\n      });\r\n  }\r\n\r\n  function notId(v) {\r\n      return !v;\r\n  }\r\n\r\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name everyLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the\r\n   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\r\n   * which must be called with a  boolean argument once it has completed. Invoked\r\n   * with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\r\n  var everyLimit = _createTester(eachOfLimit, notId, notId);\r\n\r\n  /**\r\n   * Returns `true` if every element in `coll` satisfies an async test. If any\r\n   * iteratee call returns `false`, the main `callback` is immediately called.\r\n   *\r\n   * @name every\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias all\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the\r\n   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\r\n   * which must be called with a  boolean argument once it has completed. Invoked\r\n   * with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.every(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then every file exists\r\n   * });\r\n   */\r\n  var every = doLimit(everyLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\r\n   *\r\n   * @name everySeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the\r\n   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\r\n   * which must be called with a  boolean argument once it has completed. Invoked\r\n   * with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\r\n  var everySeries = doLimit(everyLimit, 1);\r\n\r\n  function _filter(eachfn, arr, iteratee, callback) {\r\n      callback = once(callback || noop);\r\n      var results = [];\r\n      eachfn(arr, function (x, index, callback) {\r\n          iteratee(x, function (err, v) {\r\n              if (err) {\r\n                  callback(err);\r\n              } else {\r\n                  if (v) {\r\n                      results.push({ index: index, value: x });\r\n                  }\r\n                  callback();\r\n              }\r\n          });\r\n      }, function (err) {\r\n          if (err) {\r\n              callback(err);\r\n          } else {\r\n              callback(null, arrayMap(results.sort(function (a, b) {\r\n                  return a.index - b.index;\r\n              }), baseProperty('value')));\r\n          }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name filterLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\r\n  var filterLimit = doParallelLimit(_filter);\r\n\r\n  /**\r\n   * Returns a new array of all the values in `coll` which pass an async truth\r\n   * test. This operation is performed in parallel, but the results array will be\r\n   * in the same order as the original.\r\n   *\r\n   * @name filter\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias select\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.filter(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of the existing files\r\n   * });\r\n   */\r\n  var filter = doLimit(filterLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\r\n   *\r\n   * @name filterSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results)\r\n   */\r\n  var filterSeries = doLimit(filterLimit, 1);\r\n\r\n  /**\r\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\r\n   * to call itself again, in series, indefinitely.\r\n\r\n   * If an error is passed to the\r\n   * callback then `errback` is called with the error, and execution stops,\r\n   * otherwise it will never be called.\r\n   *\r\n   * @name forever\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Function} fn - a function to call repeatedly. Invoked with (next).\r\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\r\n   * this function will be called, and execution stops. Invoked with (err).\r\n   * @example\r\n   *\r\n   * async.forever(\r\n   *     function(next) {\r\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\r\n   *         // it will result in this function being called again.\r\n   *     },\r\n   *     function(err) {\r\n   *         // if next is called with a value in its first parameter, it will appear\r\n   *         // in here as 'err', and execution will stop.\r\n   *     }\r\n   * );\r\n   */\r\n  function forever(fn, errback) {\r\n      var done = onlyOnce(errback || noop);\r\n      var task = ensureAsync(fn);\r\n\r\n      function next(err) {\r\n          if (err) return done(err);\r\n          task(next);\r\n      }\r\n      next();\r\n  }\r\n\r\n  /**\r\n   * Logs the result of an `async` function to the `console`. Only works in\r\n   * Node.js or in browsers that support `console.log` and `console.error` (such\r\n   * as FF and Chrome). If multiple arguments are returned from the async\r\n   * function, `console.log` is called on each argument in order.\r\n   *\r\n   * @name log\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} function - The function you want to eventually apply all\r\n   * arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, 'hello ' + name);\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.log(hello, 'world');\r\n   * 'hello world'\r\n   */\r\n  var log = consoleFunc('log');\r\n\r\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name mapValuesLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A function to apply to each value in `obj`.\r\n   * The iteratee is passed a `callback(err, transformed)` which must be called\r\n   * once it has completed with an error (which can be `null`) and a\r\n   * transformed value. Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an object of the\r\n   * transformed values from the `obj`. Invoked with (err, result).\r\n   */\r\n  function mapValuesLimit(obj, limit, iteratee, callback) {\r\n      callback = once(callback || noop);\r\n      var newObj = {};\r\n      eachOfLimit(obj, limit, function (val, key, next) {\r\n          iteratee(val, key, function (err, result) {\r\n              if (err) return next(err);\r\n              newObj[key] = result;\r\n              next();\r\n          });\r\n      }, function (err) {\r\n          callback(err, newObj);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\r\n   *\r\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\r\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\r\n   * callback for when it has finished processing. Each of these callbacks takes\r\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\r\n   * passes an error to its callback, the main `callback` (for the `mapValues`\r\n   * function) is immediately called with the error.\r\n   *\r\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\r\n   * be roughly in the order they complete, (but this is very engine-specific)\r\n   *\r\n   * @name mapValues\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each value and key in\r\n   * `coll`. The iteratee is passed a `callback(err, transformed)` which must be\r\n   * called once it has completed with an error (which can be `null`) and a\r\n   * transformed value. Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `obj`. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.mapValues({\r\n   *     f1: 'file1',\r\n   *     f2: 'file2',\r\n   *     f3: 'file3'\r\n   * }, function (file, key, callback) {\r\n   *   fs.stat(file, callback);\r\n   * }, function(err, result) {\r\n   *     // results is now a map of stats for each file, e.g.\r\n   *     // {\r\n   *     //     f1: [stats for file1],\r\n   *     //     f2: [stats for file2],\r\n   *     //     f3: [stats for file3]\r\n   *     // }\r\n   * });\r\n   */\r\n\r\n  var mapValues = doLimit(mapValuesLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapValuesSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each value in `obj`.\r\n   * The iteratee is passed a `callback(err, transformed)` which must be called\r\n   * once it has completed with an error (which can be `null`) and a\r\n   * transformed value. Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an object of the\r\n   * transformed values from the `obj`. Invoked with (err, result).\r\n   */\r\n  var mapValuesSeries = doLimit(mapValuesLimit, 1);\r\n\r\n  function has(obj, key) {\r\n      return key in obj;\r\n  }\r\n\r\n  /**\r\n   * Caches the results of an `async` function. When creating a hash to store\r\n   * function results against, the callback is omitted from the hash and an\r\n   * optional hash function can be used.\r\n   *\r\n   * If no hash function is specified, the first argument is used as a hash key,\r\n   * which may work reasonably if it is a string or a data type that converts to a\r\n   * distinct string. Note that objects and arrays will not behave reasonably.\r\n   * Neither will cases where the other arguments are significant. In such cases,\r\n   * specify your own hash function.\r\n   *\r\n   * The cache of results is exposed as the `memo` property of the function\r\n   * returned by `memoize`.\r\n   *\r\n   * @name memoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} fn - The function to proxy and cache results from.\r\n   * @param {Function} hasher - An optional function for generating a custom hash\r\n   * for storing results. It has all the arguments applied to it apart from the\r\n   * callback, and must be synchronous.\r\n   * @returns {Function} a memoized version of `fn`\r\n   * @example\r\n   *\r\n   * var slow_fn = function(name, callback) {\r\n   *     // do something\r\n   *     callback(null, result);\r\n   * };\r\n   * var fn = async.memoize(slow_fn);\r\n   *\r\n   * // fn can now be used as if it were slow_fn\r\n   * fn('some name', function() {\r\n   *     // callback\r\n   * });\r\n   */\r\n  function memoize(fn, hasher) {\r\n      var memo = Object.create(null);\r\n      var queues = Object.create(null);\r\n      hasher = hasher || identity;\r\n      var memoized = initialParams(function memoized(args, callback) {\r\n          var key = hasher.apply(null, args);\r\n          if (has(memo, key)) {\r\n              setImmediate$1(function () {\r\n                  callback.apply(null, memo[key]);\r\n              });\r\n          } else if (has(queues, key)) {\r\n              queues[key].push(callback);\r\n          } else {\r\n              queues[key] = [callback];\r\n              fn.apply(null, args.concat([rest(function (args) {\r\n                  memo[key] = args;\r\n                  var q = queues[key];\r\n                  delete queues[key];\r\n                  for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, args);\r\n                  }\r\n              })]));\r\n          }\r\n      });\r\n      memoized.memo = memo;\r\n      memoized.unmemoized = fn;\r\n      return memoized;\r\n  }\r\n\r\n  /**\r\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n   * calls `setImmediate`.  In the browser it will use `setImmediate` if\r\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n   * priority events may precede the execution of `callback`.\r\n   *\r\n   * This is used internally for browser-compatibility purposes.\r\n   *\r\n   * @name nextTick\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @alias setImmediate\r\n   * @category Util\r\n   * @param {Function} callback - The function to call on a later loop around\r\n   * the event loop. Invoked with (args...).\r\n   * @param {...*} args... - any number of additional arguments to pass to the\r\n   * callback on the next tick.\r\n   * @example\r\n   *\r\n   * var call_order = [];\r\n   * async.nextTick(function() {\r\n   *     call_order.push('two');\r\n   *     // call_order now equals ['one','two']\r\n   * });\r\n   * call_order.push('one');\r\n   *\r\n   * async.setImmediate(function (a, b, c) {\r\n   *     // a, b, and c equal 1, 2, and 3\r\n   * }, 1, 2, 3);\r\n   */\r\n  var _defer$1;\r\n\r\n  if (hasNextTick) {\r\n      _defer$1 = process.nextTick;\r\n  } else if (hasSetImmediate) {\r\n      _defer$1 = setImmediate;\r\n  } else {\r\n      _defer$1 = fallback;\r\n  }\r\n\r\n  var nextTick = wrap(_defer$1);\r\n\r\n  function _parallel(eachfn, tasks, callback) {\r\n      callback = callback || noop;\r\n      var results = isArrayLike(tasks) ? [] : {};\r\n\r\n      eachfn(tasks, function (task, key, callback) {\r\n          task(rest(function (err, args) {\r\n              if (args.length <= 1) {\r\n                  args = args[0];\r\n              }\r\n              results[key] = args;\r\n              callback(err);\r\n          }));\r\n      }, function (err) {\r\n          callback(err, results);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name parallelLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\r\n   * @category Control Flow\r\n   * @param {Array|Collection} tasks - A collection containing functions to run.\r\n   * Each function is passed a `callback(err, result)` which it must call on\r\n   * completion with an error `err` (which can be `null`) and an optional `result`\r\n   * value.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   */\r\n  function parallelLimit(tasks, limit, callback) {\r\n    _parallel(_eachOfLimit(limit), tasks, callback);\r\n  }\r\n\r\n  /**\r\n   * Run the `tasks` collection of functions in parallel, without waiting until\r\n   * the previous function has completed. If any of the functions pass an error to\r\n   * its callback, the main `callback` is immediately called with the value of the\r\n   * error. Once the `tasks` have completed, the results are passed to the final\r\n   * `callback` as an array.\r\n   *\r\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\r\n   * parallel execution of code.  If your tasks do not use any timers or perform\r\n   * any I/O, they will actually be executed in series.  Any synchronous setup\r\n   * sections for each task will happen one after the other.  JavaScript remains\r\n   * single-threaded.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   * results from {@link async.parallel}.\r\n   *\r\n   * @name parallel\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to run.\r\n   * Each function is passed a `callback(err, result)` which it must call on\r\n   * completion with an error `err` (which can be `null`) and an optional `result`\r\n   * value.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   * @example\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // the results array will equal ['one','two'] even though\r\n   *     // the second function had a shorter timeout.\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * async.parallel({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equals to: {one: 1, two: 2}\r\n   * });\r\n   */\r\n  var parallel = doLimit(parallelLimit, Infinity);\r\n\r\n  /**\r\n   * A queue of tasks for the worker function to complete.\r\n   * @typedef {Object} QueueObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - a function returning the number of items\r\n   * waiting to be processed. Invoke with `queue.length()`.\r\n   * @property {Function} started - a function returning whether or not any\r\n   * items have been pushed and processed by the queue. Invoke with `queue.started()`.\r\n   * @property {Function} running - a function returning the number of items\r\n   * currently being processed. Invoke with `queue.running()`.\r\n   * @property {Function} workersList - a function returning the array of items\r\n   * currently being processed. Invoke with `queue.workersList()`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\r\n   * @property {number} concurrency - an integer for determining how many `worker`\r\n   * functions should be run in parallel. This property can be changed after a\r\n   * `queue` is created to alter the concurrency on-the-fly.\r\n   * @property {Function} push - add a new task to the `queue`. Calls `callback`\r\n   * once the `worker` has finished processing the task. Instead of a single task,\r\n   * a `tasks` array can be submitted. The respective callback is used for every\r\n   * task in the list. Invoke with `queue.push(task, [callback])`,\r\n   * @property {Function} unshift - add a new task to the front of the `queue`.\r\n   * Invoke with `queue.unshift(task, [callback])`.\r\n   * @property {Function} saturated - a callback that is called when the number of\r\n   * running workers hits the `concurrency` limit, and further tasks will be\r\n   * queued.\r\n   * @property {Function} unsaturated - a callback that is called when the number\r\n   * of running workers is less than the `concurrency` & `buffer` limits, and\r\n   * further tasks will not be queued.\r\n   * @property {number} buffer - A minimum threshold buffer in order to say that\r\n   * the `queue` is `unsaturated`.\r\n   * @property {Function} empty - a callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - a callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} error - a callback that is called when a task errors.\r\n   * Has the signature `function(error, task)`.\r\n   * @property {boolean} paused - a boolean for determining whether the queue is\r\n   * in a paused state.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke with `queue.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.\r\n   */\r\n\r\n  /**\r\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\r\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\r\n   * `worker`s are in progress, the task is queued until one becomes available.\r\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\r\n   *\r\n   * @name queue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Function} worker - An asynchronous function for processing a queued\r\n   * task, which must call its `callback(err)` argument when finished, with an\r\n   * optional `error` as an argument.  If you want to handle errors from an\r\n   * individual task, pass a callback to `q.push()`. Invoked with\r\n   * (task, callback).\r\n   * @param {number} [concurrency=1] - An `integer` for determining how many\r\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\r\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the queue.\r\n   * @example\r\n   *\r\n   * // create a queue object with concurrency 2\r\n   * var q = async.queue(function(task, callback) {\r\n   *     console.log('hello ' + task.name);\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // assign a callback\r\n   * q.drain = function() {\r\n   *     console.log('all items have been processed');\r\n   * };\r\n   *\r\n   * // add some items to the queue\r\n   * q.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * q.push({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   *\r\n   * // add some items to the queue (batch-wise)\r\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\r\n   *     console.log('finished processing item');\r\n   * });\r\n   *\r\n   * // add some items to the front of the queue\r\n   * q.unshift({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   */\r\n  function queue$1 (worker, concurrency) {\r\n    return queue(function (items, cb) {\r\n      worker(items[0], cb);\r\n    }, concurrency, 1);\r\n  }\r\n\r\n  /**\r\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\r\n   * completed in ascending priority order.\r\n   *\r\n   * @name priorityQueue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {Function} worker - An asynchronous function for processing a queued\r\n   * task, which must call its `callback(err)` argument when finished, with an\r\n   * optional `error` as an argument.  If you want to handle errors from an\r\n   * individual task, pass a callback to `q.push()`. Invoked with\r\n   * (task, callback).\r\n   * @param {number} concurrency - An `integer` for determining how many `worker`\r\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\r\n   * `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\r\n   * differences between `queue` and `priorityQueue` objects:\r\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\r\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\r\n   * * The `unshift` method was removed.\r\n   */\r\n  function priorityQueue (worker, concurrency) {\r\n      // Start with a normal queue\r\n      var q = queue$1(worker, concurrency);\r\n\r\n      // Override push to accept second parameter representing priority\r\n      q.push = function (data, priority, callback) {\r\n          if (callback == null) callback = noop;\r\n          if (typeof callback !== 'function') {\r\n              throw new Error('task callback must be a function');\r\n          }\r\n          q.started = true;\r\n          if (!isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if (data.length === 0) {\r\n              // call drain immediately if there are no tasks\r\n              return setImmediate$1(function () {\r\n                  q.drain();\r\n              });\r\n          }\r\n\r\n          priority = priority || 0;\r\n          var nextNode = q._tasks.head;\r\n          while (nextNode && priority >= nextNode.priority) {\r\n              nextNode = nextNode.next;\r\n          }\r\n\r\n          arrayEach(data, function (task) {\r\n              var item = {\r\n                  data: task,\r\n                  priority: priority,\r\n                  callback: callback\r\n              };\r\n\r\n              if (nextNode) {\r\n                  q._tasks.insertBefore(nextNode, item);\r\n              } else {\r\n                  q._tasks.push(item);\r\n              }\r\n          });\r\n          setImmediate$1(q.process);\r\n      };\r\n\r\n      // Remove unshift function\r\n      delete q.unshift;\r\n\r\n      return q;\r\n  }\r\n\r\n  /**\r\n   * Runs the `tasks` array of functions in parallel, without waiting until the\r\n   * previous function has completed. Once any the `tasks` completed or pass an\r\n   * error to its callback, the main `callback` is immediately called. It's\r\n   * equivalent to `Promise.race()`.\r\n   *\r\n   * @name race\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array containing functions to run. Each function\r\n   * is passed a `callback(err, result)` which it must call on completion with an\r\n   * error `err` (which can be `null`) and an optional `result` value.\r\n   * @param {Function} callback - A callback to run once any of the functions have\r\n   * completed. This function gets an error or result from the first function that\r\n   * completed. Invoked with (err, result).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.race([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // main callback\r\n   * function(err, result) {\r\n   *     // the result will be equal to 'two' as it finishes earlier\r\n   * });\r\n   */\r\n  function race(tasks, callback) {\r\n      callback = once(callback || noop);\r\n      if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\r\n      if (!tasks.length) return callback();\r\n      arrayEach(tasks, function (task) {\r\n          task(callback);\r\n      });\r\n  }\r\n\r\n  var slice = Array.prototype.slice;\r\n\r\n  /**\r\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\r\n   *\r\n   * @name reduceRight\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reduce]{@link module:Collections.reduce}\r\n   * @alias foldr\r\n   * @category Collection\r\n   * @param {Array} array - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {Function} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction. The `iteratee` is passed a\r\n   * `callback(err, reduction)` which accepts an optional error as its first\r\n   * argument, and the state of the reduction as the second. If an error is\r\n   * passed to the callback, the reduction is stopped and the main `callback` is\r\n   * immediately called with the error. Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   */\r\n  function reduceRight(array, memo, iteratee, callback) {\r\n    var reversed = slice.call(array).reverse();\r\n    reduce(reversed, memo, iteratee, callback);\r\n  }\r\n\r\n  /**\r\n   * Wraps the function in another function that always returns data even when it\r\n   * errors.\r\n   *\r\n   * The object returned has either the property `error` or `value`.\r\n   *\r\n   * @name reflect\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} fn - The function you want to wrap\r\n   * @returns {Function} - A function that always passes null to it's callback as\r\n   * the error. The second argument to the callback will be an `object` with\r\n   * either an `error` or a `value` property.\r\n   * @example\r\n   *\r\n   * async.parallel([\r\n   *     async.reflect(function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback('bad stuff happened');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     })\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = 'bad stuff happened'\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   */\r\n  function reflect(fn) {\r\n      return initialParams(function reflectOn(args, reflectCallback) {\r\n          args.push(rest(function callback(err, cbArgs) {\r\n              if (err) {\r\n                  reflectCallback(null, {\r\n                      error: err\r\n                  });\r\n              } else {\r\n                  var value = null;\r\n                  if (cbArgs.length === 1) {\r\n                      value = cbArgs[0];\r\n                  } else if (cbArgs.length > 1) {\r\n                      value = cbArgs;\r\n                  }\r\n                  reflectCallback(null, {\r\n                      value: value\r\n                  });\r\n              }\r\n          }));\r\n\r\n          return fn.apply(this, args);\r\n      });\r\n  }\r\n\r\n  function reject$1(eachfn, arr, iteratee, callback) {\r\n      _filter(eachfn, arr, function (value, cb) {\r\n          iteratee(value, function (err, v) {\r\n              if (err) {\r\n                  cb(err);\r\n              } else {\r\n                  cb(null, !v);\r\n              }\r\n          });\r\n      }, callback);\r\n  }\r\n\r\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name rejectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\r\n  var rejectLimit = doParallelLimit(reject$1);\r\n\r\n  /**\r\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\r\n   *\r\n   * @name reject\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.reject(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of missing files\r\n   *     createFiles(results);\r\n   * });\r\n   */\r\n  var reject = doLimit(rejectLimit, Infinity);\r\n\r\n  /**\r\n   * A helper function that wraps an array or an object of functions with reflect.\r\n   *\r\n   * @name reflectAll\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.reflect]{@link module:Utils.reflect}\r\n   * @category Util\r\n   * @param {Array} tasks - The array of functions to wrap in `async.reflect`.\r\n   * @returns {Array} Returns an array of functions, each function wrapped in\r\n   * `async.reflect`\r\n   * @example\r\n   *\r\n   * let tasks = [\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback(new Error('bad stuff happened'));\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ];\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = Error('bad stuff happened')\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * let tasks = {\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         callback('two');\r\n   *     },\r\n   *     three: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'three');\r\n   *         }, 100);\r\n   *     }\r\n   * };\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results.one.value = 'one'\r\n   *     // results.two.error = 'two'\r\n   *     // results.three.value = 'three'\r\n   * });\r\n   */\r\n  function reflectAll(tasks) {\r\n      var results;\r\n      if (isArray(tasks)) {\r\n          results = arrayMap(tasks, reflect);\r\n      } else {\r\n          results = {};\r\n          baseForOwn(tasks, function (task, key) {\r\n              results[key] = reflect.call(this, task);\r\n          });\r\n      }\r\n      return results;\r\n  }\r\n\r\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\r\n   *\r\n   * @name rejectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\r\n  var rejectSeries = doLimit(rejectLimit, 1);\r\n\r\n  /**\r\n   * Creates a function that returns `value`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.4.0\r\n   * @category Util\r\n   * @param {*} value The value to return from the new function.\r\n   * @returns {Function} Returns the new constant function.\r\n   * @example\r\n   *\r\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n   *\r\n   * console.log(objects);\r\n   * // => [{ 'a': 1 }, { 'a': 1 }]\r\n   *\r\n   * console.log(objects[0] === objects[1]);\r\n   * // => true\r\n   */\r\n  function constant$1(value) {\r\n    return function() {\r\n      return value;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Attempts to get a successful response from `task` no more than `times` times\r\n   * before returning an error. If the task is successful, the `callback` will be\r\n   * passed the result of the successful task. If all attempts fail, the callback\r\n   * will be passed the error and result (if any) of the final attempt.\r\n   *\r\n   * @name retry\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\r\n   * object with `times` and `interval` or a number.\r\n   * * `times` - The number of attempts to make before giving up.  The default\r\n   *   is `5`.\r\n   * * `interval` - The time to wait between retries, in milliseconds.  The\r\n   *   default is `0`. The interval may also be specified as a function of the\r\n   *   retry count (see example).\r\n   * * If `opts` is a number, the number specifies the number of times to retry,\r\n   *   with the default interval of `0`.\r\n   * @param {Function} task - A function which receives two arguments: (1) a\r\n   * `callback(err, result)` which must be called when finished, passing `err`\r\n   * (which can be `null`) and the `result` of the function's execution, and (2)\r\n   * a `results` object, containing the results of the previously executed\r\n   * functions (if nested inside another control flow). Invoked with\r\n   * (callback, results).\r\n   * @param {Function} [callback] - An optional callback which is called when the\r\n   * task has succeeded, or after the final failed attempt. It receives the `err`\r\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\r\n   * with (err, results).\r\n   * @example\r\n   *\r\n   * // The `retry` function can be used as a stand-alone control flow by passing\r\n   * // a callback, as shown below:\r\n   *\r\n   * // try calling apiMethod 3 times\r\n   * async.retry(3, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\r\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 10 times with exponential backoff\r\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\r\n   * async.retry({\r\n   *   times: 10,\r\n   *   interval: function(retryCount) {\r\n   *     return 50 * Math.pow(2, retryCount);\r\n   *   }\r\n   * }, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod the default 5 times no delay between each retry\r\n   * async.retry(apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // It can also be embedded within other control flow functions to retry\r\n   * // individual methods that are not as reliable, like this:\r\n   * async.auto({\r\n   *     users: api.getUsers.bind(api),\r\n   *     payments: async.retry(3, api.getPayments.bind(api))\r\n   * }, function(err, results) {\r\n   *     // do something with the results\r\n   * });\r\n   */\r\n  function retry(opts, task, callback) {\r\n      var DEFAULT_TIMES = 5;\r\n      var DEFAULT_INTERVAL = 0;\r\n\r\n      var options = {\r\n          times: DEFAULT_TIMES,\r\n          intervalFunc: constant$1(DEFAULT_INTERVAL)\r\n      };\r\n\r\n      function parseTimes(acc, t) {\r\n          if (typeof t === 'object') {\r\n              acc.times = +t.times || DEFAULT_TIMES;\r\n\r\n              acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\r\n          } else if (typeof t === 'number' || typeof t === 'string') {\r\n              acc.times = +t || DEFAULT_TIMES;\r\n          } else {\r\n              throw new Error(\"Invalid arguments for async.retry\");\r\n          }\r\n      }\r\n\r\n      if (arguments.length < 3 && typeof opts === 'function') {\r\n          callback = task || noop;\r\n          task = opts;\r\n      } else {\r\n          parseTimes(options, opts);\r\n          callback = callback || noop;\r\n      }\r\n\r\n      if (typeof task !== 'function') {\r\n          throw new Error(\"Invalid arguments for async.retry\");\r\n      }\r\n\r\n      var attempt = 1;\r\n      function retryAttempt() {\r\n          task(function (err) {\r\n              if (err && attempt++ < options.times) {\r\n                  setTimeout(retryAttempt, options.intervalFunc(attempt));\r\n              } else {\r\n                  callback.apply(null, arguments);\r\n              }\r\n          });\r\n      }\r\n\r\n      retryAttempt();\r\n  }\r\n\r\n  /**\r\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it\r\n   * retryable, rather than immediately calling it with retries.\r\n   *\r\n   * @name retryable\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.retry]{@link module:ControlFlow.retry}\r\n   * @category Control Flow\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\r\n   * options, exactly the same as from `retry`\r\n   * @param {Function} task - the asynchronous function to wrap\r\n   * @returns {Functions} The wrapped function, which when invoked, will retry on\r\n   * an error, based on the parameters specified in `opts`.\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     dep1: async.retryable(3, getFromFlakyService),\r\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\r\n   *         maybeProcessData(results.dep1, cb);\r\n   *     })]\r\n   * }, callback);\r\n   */\r\n  function retryable (opts, task) {\r\n      if (!task) {\r\n          task = opts;\r\n          opts = null;\r\n      }\r\n      return initialParams(function (args, callback) {\r\n          function taskFn(cb) {\r\n              task.apply(null, args.concat([cb]));\r\n          }\r\n\r\n          if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Run the functions in the `tasks` collection in series, each one running once\r\n   * the previous function has completed. If any functions in the series pass an\r\n   * error to its callback, no more functions are run, and `callback` is\r\n   * immediately called with the value of the error. Otherwise, `callback`\r\n   * receives an array of results when `tasks` have completed.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function, and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   *  results from {@link async.series}.\r\n   *\r\n   * **Note** that while many implementations preserve the order of object\r\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n   * explicitly states that\r\n   *\r\n   * > The mechanics and order of enumerating the properties is not specified.\r\n   *\r\n   * So if you rely on the order in which your series of functions are executed,\r\n   * and want this to work on all platforms, consider using an array.\r\n   *\r\n   * @name series\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each\r\n   * function is passed a `callback(err, result)` it must call on completion with\r\n   * an error `err` (which can be `null`) and an optional `result` value.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This function gets a results array (or object)\r\n   * containing all the result arguments passed to the `task` callbacks. Invoked\r\n   * with (err, result).\r\n   * @example\r\n   * async.series([\r\n   *     function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // results is now equal to ['one', 'two']\r\n   * });\r\n   *\r\n   * async.series({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback){\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equal to: {one: 1, two: 2}\r\n   * });\r\n   */\r\n  function series(tasks, callback) {\r\n    _parallel(eachOfSeries, tasks, callback);\r\n  }\r\n\r\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name someLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anyLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the array\r\n   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\r\n   * be called with a boolean argument once it has completed. Invoked with\r\n   * (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\r\n  var someLimit = _createTester(eachOfLimit, Boolean, identity);\r\n\r\n  /**\r\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\r\n   * If any iteratee call returns `true`, the main `callback` is immediately\r\n   * called.\r\n   *\r\n   * @name some\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias any\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the array\r\n   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\r\n   * be called with a boolean argument once it has completed. Invoked with\r\n   * (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.some(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then at least one of the files exists\r\n   * });\r\n   */\r\n  var some = doLimit(someLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\r\n   *\r\n   * @name someSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anySeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in the array\r\n   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\r\n   * be called with a boolean argument once it has completed. Invoked with\r\n   * (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\r\n  var someSeries = doLimit(someLimit, 1);\r\n\r\n  /**\r\n   * Sorts a list by the results of running each `coll` value through an async\r\n   * `iteratee`.\r\n   *\r\n   * @name sortBy\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee is passed a `callback(err, sortValue)` which must be called once\r\n   * it has completed with an error (which can be `null`) and a value to use as\r\n   * the sort criteria. Invoked with (item, callback).\r\n   * @param {Function} callback - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is the items\r\n   * from the original `coll` sorted by the values returned by the `iteratee`\r\n   * calls. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.sortBy(['file1','file2','file3'], function(file, callback) {\r\n   *     fs.stat(file, function(err, stats) {\r\n   *         callback(err, stats.mtime);\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results is now the original array of files sorted by\r\n   *     // modified date\r\n   * });\r\n   *\r\n   * // By modifying the callback parameter the\r\n   * // sorting order can be influenced:\r\n   *\r\n   * // ascending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x);\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   *\r\n   * // descending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   */\r\n  function sortBy(coll, iteratee, callback) {\r\n      map(coll, function (x, callback) {\r\n          iteratee(x, function (err, criteria) {\r\n              if (err) return callback(err);\r\n              callback(null, { value: x, criteria: criteria });\r\n          });\r\n      }, function (err, results) {\r\n          if (err) return callback(err);\r\n          callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\r\n      });\r\n\r\n      function comparator(left, right) {\r\n          var a = left.criteria,\r\n              b = right.criteria;\r\n          return a < b ? -1 : a > b ? 1 : 0;\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Sets a time limit on an asynchronous function. If the function does not call\r\n   * its callback within the specified milliseconds, it will be called with a\r\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\r\n   *\r\n   * @name timeout\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} asyncFn - The asynchronous function you want to set the\r\n   * time limit.\r\n   * @param {number} milliseconds - The specified time limit.\r\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\r\n   * to timeout Error for more information..\r\n   * @returns {Function} Returns a wrapped function that can be used with any of\r\n   * the control flow functions.\r\n   * @example\r\n   *\r\n   * async.timeout(function(callback) {\r\n   *     doAsyncTask(callback);\r\n   * }, 1000);\r\n   */\r\n  function timeout(asyncFn, milliseconds, info) {\r\n      var originalCallback, timer;\r\n      var timedOut = false;\r\n\r\n      function injectedCallback() {\r\n          if (!timedOut) {\r\n              originalCallback.apply(null, arguments);\r\n              clearTimeout(timer);\r\n          }\r\n      }\r\n\r\n      function timeoutCallback() {\r\n          var name = asyncFn.name || 'anonymous';\r\n          var error = new Error('Callback function \"' + name + '\" timed out.');\r\n          error.code = 'ETIMEDOUT';\r\n          if (info) {\r\n              error.info = info;\r\n          }\r\n          timedOut = true;\r\n          originalCallback(error);\r\n      }\r\n\r\n      return initialParams(function (args, origCallback) {\r\n          originalCallback = origCallback;\r\n          // setup timer and call original function\r\n          timer = setTimeout(timeoutCallback, milliseconds);\r\n          asyncFn.apply(null, args.concat(injectedCallback));\r\n      });\r\n  }\r\n\r\n  /* Built-in method references for those with the same name as other `lodash` methods. */\r\n  var nativeCeil = Math.ceil;\r\n  var nativeMax$1 = Math.max;\r\n  /**\r\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n   * coerce arguments to numbers.\r\n   *\r\n   * @private\r\n   * @param {number} start The start of the range.\r\n   * @param {number} end The end of the range.\r\n   * @param {number} step The value to increment or decrement by.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Array} Returns the range of numbers.\r\n   */\r\n  function baseRange(start, end, step, fromRight) {\r\n    var index = -1,\r\n        length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),\r\n        result = Array(length);\r\n\r\n    while (length--) {\r\n      result[fromRight ? length : ++index] = start;\r\n      start += step;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name timesLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} count - The number of times to run the function.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - The function to call `n` times. Invoked with the\r\n   * iteration index and a callback (n, next).\r\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\r\n   */\r\n  function timeLimit(count, limit, iteratee, callback) {\r\n    mapLimit(baseRange(0, count, 1), limit, iteratee, callback);\r\n  }\r\n\r\n  /**\r\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\r\n   * manner you would use with [map]{@link module:Collections.map}.\r\n   *\r\n   * @name times\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {Function} iteratee - The function to call `n` times. Invoked with the\r\n   * iteration index and a callback (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   * @example\r\n   *\r\n   * // Pretend this is some complicated async factory\r\n   * var createUser = function(id, callback) {\r\n   *     callback(null, {\r\n   *         id: 'user' + id\r\n   *     });\r\n   * };\r\n   *\r\n   * // generate 5 users\r\n   * async.times(5, function(n, next) {\r\n   *     createUser(n, function(err, user) {\r\n   *         next(err, user);\r\n   *     });\r\n   * }, function(err, users) {\r\n   *     // we should now have 5 users\r\n   * });\r\n   */\r\n  var times = doLimit(timeLimit, Infinity);\r\n\r\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\r\n   *\r\n   * @name timesSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {Function} iteratee - The function to call `n` times. Invoked with the\r\n   * iteration index and a callback (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   */\r\n  var timesSeries = doLimit(timeLimit, 1);\r\n\r\n  /**\r\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\r\n   * element in series, each step potentially mutating an `accumulator` value.\r\n   * The type of the accumulator defaults to the type of collection passed in.\r\n   *\r\n   * @name transform\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\r\n   * it will default to an empty Object or Array, depending on the type of `coll`\r\n   * @param {Function} iteratee - A function applied to each item in the\r\n   * collection that potentially modifies the accumulator. The `iteratee` is\r\n   * passed a `callback(err)` which accepts an optional error as its first\r\n   * argument. If an error is passed to the callback, the transform is stopped\r\n   * and the main `callback` is immediately called with the error.\r\n   * Invoked with (accumulator, item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the transformed accumulator.\r\n   * Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.transform([1,2,3], function(acc, item, index, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         acc.push(item * 2)\r\n   *         callback(null)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to [2, 4, 6]\r\n   * });\r\n   *\r\n   * @example\r\n   *\r\n   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\r\n   *     setImmediate(function () {\r\n   *         obj[key] = val * 2;\r\n   *         callback();\r\n   *     })\r\n   * }, function (err, result) {\r\n   *     // result is equal to {a: 2, b: 4, c: 6}\r\n   * })\r\n   */\r\n  function transform(coll, accumulator, iteratee, callback) {\r\n      if (arguments.length === 3) {\r\n          callback = iteratee;\r\n          iteratee = accumulator;\r\n          accumulator = isArray(coll) ? [] : {};\r\n      }\r\n      callback = once(callback || noop);\r\n\r\n      eachOf(coll, function (v, k, cb) {\r\n          iteratee(accumulator, v, k, cb);\r\n      }, function (err) {\r\n          callback(err, accumulator);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\r\n   * unmemoized form. Handy for testing.\r\n   *\r\n   * @name unmemoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.memoize]{@link module:Utils.memoize}\r\n   * @category Util\r\n   * @param {Function} fn - the memoized function\r\n   * @returns {Function} a function that calls the original unmemoized function\r\n   */\r\n  function unmemoize(fn) {\r\n      return function () {\r\n          return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n  }\r\n\r\n  /**\r\n   * Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs.\r\n   *\r\n   * @name whilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with ().\r\n   * @param {Function} iteratee - A function which is called each time `test` passes.\r\n   * The function is passed a `callback(err)`, which must be called once it has\r\n   * completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `fn`'s\r\n   * callback. Invoked with (err, [results]);\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   * async.whilst(\r\n   *     function() { return count < 5; },\r\n   *     function(callback) {\r\n   *         count++;\r\n   *         setTimeout(function() {\r\n   *             callback(null, count);\r\n   *         }, 1000);\r\n   *     },\r\n   *     function (err, n) {\r\n   *         // 5 seconds have passed, n = 5\r\n   *     }\r\n   * );\r\n   */\r\n  function whilst(test, iteratee, callback) {\r\n      callback = onlyOnce(callback || noop);\r\n      if (!test()) return callback(null);\r\n      var next = rest(function (err, args) {\r\n          if (err) return callback(err);\r\n          if (test()) return iteratee(next);\r\n          callback.apply(null, [null].concat(args));\r\n      });\r\n      iteratee(next);\r\n  }\r\n\r\n  /**\r\n   * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs. `callback` will be passed an error and any\r\n   * arguments passed to the final `fn`'s callback.\r\n   *\r\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\r\n   *\r\n   * @name until\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with ().\r\n   * @param {Function} fn - A function which is called each time `test` fails.\r\n   * The function is passed a `callback(err)`, which must be called once it has\r\n   * completed with an optional `err` argument. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `fn`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\r\n  function until(test, fn, callback) {\r\n      whilst(function () {\r\n          return !test.apply(this, arguments);\r\n      }, fn, callback);\r\n  }\r\n\r\n  /**\r\n   * Runs the `tasks` array of functions in series, each passing their results to\r\n   * the next in the array. However, if any of the `tasks` pass an error to their\r\n   * own callback, the next function is not executed, and the main `callback` is\r\n   * immediately called with the error.\r\n   *\r\n   * @name waterfall\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array of functions to run, each function is passed\r\n   * a `callback(err, result1, result2, ...)` it must call on completion. The\r\n   * first argument is an error (which can be `null`) and any further arguments\r\n   * will be passed as arguments in order to the next task.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This will be passed the results of the last task's\r\n   * callback. Invoked with (err, [results]).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     function(callback) {\r\n   *         callback(null, 'one', 'two');\r\n   *     },\r\n   *     function(arg1, arg2, callback) {\r\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *         callback(null, 'three');\r\n   *     },\r\n   *     function(arg1, callback) {\r\n   *         // arg1 now equals 'three'\r\n   *         callback(null, 'done');\r\n   *     }\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   *\r\n   * // Or, with named functions:\r\n   * async.waterfall([\r\n   *     myFirstFunction,\r\n   *     mySecondFunction,\r\n   *     myLastFunction,\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   * function myFirstFunction(callback) {\r\n   *     callback(null, 'one', 'two');\r\n   * }\r\n   * function mySecondFunction(arg1, arg2, callback) {\r\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *     callback(null, 'three');\r\n   * }\r\n   * function myLastFunction(arg1, callback) {\r\n   *     // arg1 now equals 'three'\r\n   *     callback(null, 'done');\r\n   * }\r\n   */\r\n  function waterfall (tasks, callback) {\r\n      callback = once(callback || noop);\r\n      if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\r\n      if (!tasks.length) return callback();\r\n      var taskIndex = 0;\r\n\r\n      function nextTask(args) {\r\n          if (taskIndex === tasks.length) {\r\n              return callback.apply(null, [null].concat(args));\r\n          }\r\n\r\n          var taskCallback = onlyOnce(rest(function (err, args) {\r\n              if (err) {\r\n                  return callback.apply(null, [err].concat(args));\r\n              }\r\n              nextTask(args);\r\n          }));\r\n\r\n          args.push(taskCallback);\r\n\r\n          var task = tasks[taskIndex++];\r\n          task.apply(null, args);\r\n      }\r\n\r\n      nextTask([]);\r\n  }\r\n\r\n  var index = {\r\n    applyEach: applyEach,\r\n    applyEachSeries: applyEachSeries,\r\n    apply: apply$1,\r\n    asyncify: asyncify,\r\n    auto: auto,\r\n    autoInject: autoInject,\r\n    cargo: cargo,\r\n    compose: compose,\r\n    concat: concat,\r\n    concatSeries: concatSeries,\r\n    constant: constant,\r\n    detect: detect,\r\n    detectLimit: detectLimit,\r\n    detectSeries: detectSeries,\r\n    dir: dir,\r\n    doDuring: doDuring,\r\n    doUntil: doUntil,\r\n    doWhilst: doWhilst,\r\n    during: during,\r\n    each: each,\r\n    eachLimit: eachLimit,\r\n    eachOf: eachOf,\r\n    eachOfLimit: eachOfLimit,\r\n    eachOfSeries: eachOfSeries,\r\n    eachSeries: eachSeries,\r\n    ensureAsync: ensureAsync,\r\n    every: every,\r\n    everyLimit: everyLimit,\r\n    everySeries: everySeries,\r\n    filter: filter,\r\n    filterLimit: filterLimit,\r\n    filterSeries: filterSeries,\r\n    forever: forever,\r\n    log: log,\r\n    map: map,\r\n    mapLimit: mapLimit,\r\n    mapSeries: mapSeries,\r\n    mapValues: mapValues,\r\n    mapValuesLimit: mapValuesLimit,\r\n    mapValuesSeries: mapValuesSeries,\r\n    memoize: memoize,\r\n    nextTick: nextTick,\r\n    parallel: parallel,\r\n    parallelLimit: parallelLimit,\r\n    priorityQueue: priorityQueue,\r\n    queue: queue$1,\r\n    race: race,\r\n    reduce: reduce,\r\n    reduceRight: reduceRight,\r\n    reflect: reflect,\r\n    reflectAll: reflectAll,\r\n    reject: reject,\r\n    rejectLimit: rejectLimit,\r\n    rejectSeries: rejectSeries,\r\n    retry: retry,\r\n    retryable: retryable,\r\n    seq: seq,\r\n    series: series,\r\n    setImmediate: setImmediate$1,\r\n    some: some,\r\n    someLimit: someLimit,\r\n    someSeries: someSeries,\r\n    sortBy: sortBy,\r\n    timeout: timeout,\r\n    times: times,\r\n    timesLimit: timeLimit,\r\n    timesSeries: timesSeries,\r\n    transform: transform,\r\n    unmemoize: unmemoize,\r\n    until: until,\r\n    waterfall: waterfall,\r\n    whilst: whilst,\r\n\r\n    // aliases\r\n    all: every,\r\n    any: some,\r\n    forEach: each,\r\n    forEachSeries: eachSeries,\r\n    forEachLimit: eachLimit,\r\n    forEachOf: eachOf,\r\n    forEachOfSeries: eachOfSeries,\r\n    forEachOfLimit: eachOfLimit,\r\n    inject: reduce,\r\n    foldl: reduce,\r\n    foldr: reduceRight,\r\n    select: filter,\r\n    selectLimit: filterLimit,\r\n    selectSeries: filterSeries,\r\n    wrapSync: asyncify\r\n  };\r\n\r\n  exports['default'] = index;\r\n  exports.applyEach = applyEach;\r\n  exports.applyEachSeries = applyEachSeries;\r\n  exports.apply = apply$1;\r\n  exports.asyncify = asyncify;\r\n  exports.auto = auto;\r\n  exports.autoInject = autoInject;\r\n  exports.cargo = cargo;\r\n  exports.compose = compose;\r\n  exports.concat = concat;\r\n  exports.concatSeries = concatSeries;\r\n  exports.constant = constant;\r\n  exports.detect = detect;\r\n  exports.detectLimit = detectLimit;\r\n  exports.detectSeries = detectSeries;\r\n  exports.dir = dir;\r\n  exports.doDuring = doDuring;\r\n  exports.doUntil = doUntil;\r\n  exports.doWhilst = doWhilst;\r\n  exports.during = during;\r\n  exports.each = each;\r\n  exports.eachLimit = eachLimit;\r\n  exports.eachOf = eachOf;\r\n  exports.eachOfLimit = eachOfLimit;\r\n  exports.eachOfSeries = eachOfSeries;\r\n  exports.eachSeries = eachSeries;\r\n  exports.ensureAsync = ensureAsync;\r\n  exports.every = every;\r\n  exports.everyLimit = everyLimit;\r\n  exports.everySeries = everySeries;\r\n  exports.filter = filter;\r\n  exports.filterLimit = filterLimit;\r\n  exports.filterSeries = filterSeries;\r\n  exports.forever = forever;\r\n  exports.log = log;\r\n  exports.map = map;\r\n  exports.mapLimit = mapLimit;\r\n  exports.mapSeries = mapSeries;\r\n  exports.mapValues = mapValues;\r\n  exports.mapValuesLimit = mapValuesLimit;\r\n  exports.mapValuesSeries = mapValuesSeries;\r\n  exports.memoize = memoize;\r\n  exports.nextTick = nextTick;\r\n  exports.parallel = parallel;\r\n  exports.parallelLimit = parallelLimit;\r\n  exports.priorityQueue = priorityQueue;\r\n  exports.queue = queue$1;\r\n  exports.race = race;\r\n  exports.reduce = reduce;\r\n  exports.reduceRight = reduceRight;\r\n  exports.reflect = reflect;\r\n  exports.reflectAll = reflectAll;\r\n  exports.reject = reject;\r\n  exports.rejectLimit = rejectLimit;\r\n  exports.rejectSeries = rejectSeries;\r\n  exports.retry = retry;\r\n  exports.retryable = retryable;\r\n  exports.seq = seq;\r\n  exports.series = series;\r\n  exports.setImmediate = setImmediate$1;\r\n  exports.some = some;\r\n  exports.someLimit = someLimit;\r\n  exports.someSeries = someSeries;\r\n  exports.sortBy = sortBy;\r\n  exports.timeout = timeout;\r\n  exports.times = times;\r\n  exports.timesLimit = timeLimit;\r\n  exports.timesSeries = timesSeries;\r\n  exports.transform = transform;\r\n  exports.unmemoize = unmemoize;\r\n  exports.until = until;\r\n  exports.waterfall = waterfall;\r\n  exports.whilst = whilst;\r\n  exports.all = every;\r\n  exports.allLimit = everyLimit;\r\n  exports.allSeries = everySeries;\r\n  exports.any = some;\r\n  exports.anyLimit = someLimit;\r\n  exports.anySeries = someSeries;\r\n  exports.find = detect;\r\n  exports.findLimit = detectLimit;\r\n  exports.findSeries = detectSeries;\r\n  exports.forEach = each;\r\n  exports.forEachSeries = eachSeries;\r\n  exports.forEachLimit = eachLimit;\r\n  exports.forEachOf = eachOf;\r\n  exports.forEachOfSeries = eachOfSeries;\r\n  exports.forEachOfLimit = eachOfLimit;\r\n  exports.inject = reduce;\r\n  exports.foldl = reduce;\r\n  exports.foldr = reduceRight;\r\n  exports.select = filter;\r\n  exports.selectLimit = filterLimit;\r\n  exports.selectSeries = filterSeries;\r\n  exports.wrapSync = asyncify;\r\n\r\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./vendor/bower_components/async/dist/async.js\n ** module id = 8\n ** module chunks = 4\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/timers-browserify/main.js\n ** module id = 9\n ** module chunks = 4\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/process/browser.js\n ** module id = 10\n ** module chunks = 4\n **/","var cbs = [], \n\tdata;\nmodule.exports = function(cb) {\n\tif(cbs) cbs.push(cb);\n\telse cb(data);\n}\nrequire.ensure([], function(require) {\n\tdata = require(\"!!./../../node_modules/babel-loader/index.js?{\\\"presets\\\":[\\\"es2015\\\",\\\"stage-0\\\"]}!./sockJSClient.js\");\n\tvar callbacks = cbs;\n\tcbs = null;\n\tfor(var i = 0, l = callbacks.length; i < l; i++) {\n\t\tcallbacks[i](data);\n\t}\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/bundle-loader!./javascripts/sockJSClient.js\n ** module id = 11\n ** module chunks = 4\n **/"],"sourceRoot":""}